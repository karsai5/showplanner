/* tslint:disable */
/* eslint-disable */
/**
 * Showplanner backend
 * API description in Markdown.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ArrayOfPersonSummaryDTO,
  MeDetailsDTO,
  PersonUpdateDTO,
} from "../models/index";
import {
  ArrayOfPersonSummaryDTOFromJSON,
  ArrayOfPersonSummaryDTOToJSON,
  MeDetailsDTOFromJSON,
  MeDetailsDTOToJSON,
  PersonUpdateDTOFromJSON,
  PersonUpdateDTOToJSON,
} from "../models/index";

export interface MePostRequest {
  personalDetails?: PersonUpdateDTO;
}

export interface PersonnelPeoplePersonIdImpersonatePostRequest {
  personId: string;
}

/**
 *
 */
export class PersonnelApi extends runtime.BaseAPI {
  /**
   * Details about logged in user
   */
  async meGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MeDetailsDTO>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/me`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MeDetailsDTOFromJSON(jsonValue)
    );
  }

  /**
   * Details about logged in user
   */
  async meGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MeDetailsDTO> {
    const response = await this.meGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Update personal details
   */
  async mePostRaw(
    requestParameters: MePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/me`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PersonUpdateDTOToJSON(requestParameters.personalDetails),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update personal details
   */
  async mePost(
    requestParameters: MePostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.mePostRaw(requestParameters, initOverrides);
  }

  /**
   * Returns all people
   */
  async personnelPeopleGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ArrayOfPersonSummaryDTO>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/personnel/people`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ArrayOfPersonSummaryDTOFromJSON(jsonValue)
    );
  }

  /**
   * Returns all people
   */
  async personnelPeopleGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ArrayOfPersonSummaryDTO> {
    const response = await this.personnelPeopleGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Impersonate a person, useful for testing and reproducing bugs
   */
  async personnelPeoplePersonIdImpersonatePostRaw(
    requestParameters: PersonnelPeoplePersonIdImpersonatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.personId === null ||
      requestParameters.personId === undefined
    ) {
      throw new runtime.RequiredError(
        "personId",
        "Required parameter requestParameters.personId was null or undefined when calling personnelPeoplePersonIdImpersonatePost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/personnel/people/{personId}/impersonate`.replace(
          `{${"personId"}}`,
          encodeURIComponent(String(requestParameters.personId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Impersonate a person, useful for testing and reproducing bugs
   */
  async personnelPeoplePersonIdImpersonatePost(
    requestParameters: PersonnelPeoplePersonIdImpersonatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.personnelPeoplePersonIdImpersonatePostRaw(
      requestParameters,
      initOverrides
    );
  }
}
