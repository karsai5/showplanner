/* tslint:disable */
/* eslint-disable */
/**
 * Showplanner backend
 * API description in Markdown.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ShowReportDTO,
  ShowReportSummaryDTO,
  ShowTimerDTO,
  ShowTimerSummaryDTO,
  ShowdocReportsIdTexGet200Response,
  UpdateShowTimerDTO,
  UpdateShowreportDTO,
} from "../models/index";
import {
  ShowReportDTOFromJSON,
  ShowReportDTOToJSON,
  ShowReportSummaryDTOFromJSON,
  ShowReportSummaryDTOToJSON,
  ShowTimerDTOFromJSON,
  ShowTimerDTOToJSON,
  ShowTimerSummaryDTOFromJSON,
  ShowTimerSummaryDTOToJSON,
  ShowdocReportsIdTexGet200ResponseFromJSON,
  ShowdocReportsIdTexGet200ResponseToJSON,
  UpdateShowTimerDTOFromJSON,
  UpdateShowTimerDTOToJSON,
  UpdateShowreportDTOFromJSON,
  UpdateShowreportDTOToJSON,
} from "../models/index";

export interface ShowdocReportsIdGetRequest {
  id: string;
}

export interface ShowdocReportsIdPdfGetRequest {
  id: string;
}

export interface ShowdocReportsIdPostRequest {
  id: string;
  report?: UpdateShowreportDTO;
}

export interface ShowdocReportsIdTexGetRequest {
  id: string;
}

export interface ShowdocTimersIdGetRequest {
  id: string;
}

export interface ShowdocTimersIdPostRequest {
  id: string;
  timer?: UpdateShowTimerDTO;
}

/**
 *
 */
export class ShowdocsApi extends runtime.BaseAPI {
  /**
   * Get users show reports
   */
  async showdocReportsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<ShowReportSummaryDTO>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/showdoc/reports`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ShowReportSummaryDTOFromJSON)
    );
  }

  /**
   * Get users show reports
   */
  async showdocReportsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<ShowReportSummaryDTO>> {
    const response = await this.showdocReportsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Gets a particular show report
   */
  async showdocReportsIdGetRaw(
    requestParameters: ShowdocReportsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ShowReportDTO>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling showdocReportsIdGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/showdoc/reports/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ShowReportDTOFromJSON(jsonValue)
    );
  }

  /**
   * Gets a particular show report
   */
  async showdocReportsIdGet(
    requestParameters: ShowdocReportsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ShowReportDTO> {
    const response = await this.showdocReportsIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Returns the report in the PDF format
   */
  async showdocReportsIdPdfGetRaw(
    requestParameters: ShowdocReportsIdPdfGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Blob>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling showdocReportsIdPdfGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/showdoc/reports/{id}/pdf`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.BlobApiResponse(response);
  }

  /**
   * Returns the report in the PDF format
   */
  async showdocReportsIdPdfGet(
    requestParameters: ShowdocReportsIdPdfGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Blob> {
    const response = await this.showdocReportsIdPdfGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Updates a show report
   */
  async showdocReportsIdPostRaw(
    requestParameters: ShowdocReportsIdPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ShowReportDTO>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling showdocReportsIdPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/showdoc/reports/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateShowreportDTOToJSON(requestParameters.report),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ShowReportDTOFromJSON(jsonValue)
    );
  }

  /**
   * Updates a show report
   */
  async showdocReportsIdPost(
    requestParameters: ShowdocReportsIdPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ShowReportDTO> {
    const response = await this.showdocReportsIdPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Returns the report in the TEX format
   */
  async showdocReportsIdTexGetRaw(
    requestParameters: ShowdocReportsIdTexGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ShowdocReportsIdTexGet200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling showdocReportsIdTexGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/showdoc/reports/{id}/tex`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ShowdocReportsIdTexGet200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Returns the report in the TEX format
   */
  async showdocReportsIdTexGet(
    requestParameters: ShowdocReportsIdTexGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ShowdocReportsIdTexGet200Response> {
    const response = await this.showdocReportsIdTexGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get users timers
   */
  async showdocTimersGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<ShowTimerSummaryDTO>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/showdoc/timers`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ShowTimerSummaryDTOFromJSON)
    );
  }

  /**
   * Get users timers
   */
  async showdocTimersGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<ShowTimerSummaryDTO>> {
    const response = await this.showdocTimersGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Gets a particular show timer
   */
  async showdocTimersIdGetRaw(
    requestParameters: ShowdocTimersIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ShowTimerDTO>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling showdocTimersIdGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/showdoc/timers/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ShowTimerDTOFromJSON(jsonValue)
    );
  }

  /**
   * Gets a particular show timer
   */
  async showdocTimersIdGet(
    requestParameters: ShowdocTimersIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ShowTimerDTO> {
    const response = await this.showdocTimersIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Updates a show timer
   */
  async showdocTimersIdPostRaw(
    requestParameters: ShowdocTimersIdPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ShowTimerDTO>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling showdocTimersIdPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/showdoc/timers/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateShowTimerDTOToJSON(requestParameters.timer),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ShowTimerDTOFromJSON(jsonValue)
    );
  }

  /**
   * Updates a show timer
   */
  async showdocTimersIdPost(
    requestParameters: ShowdocTimersIdPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ShowTimerDTO> {
    const response = await this.showdocTimersIdPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
