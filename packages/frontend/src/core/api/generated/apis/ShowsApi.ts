/* tslint:disable */
/* eslint-disable */
/**
 * Showplanner backend
 * API description in Markdown.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { RosterDTO } from "../models/index";
import { RosterDTOFromJSON, RosterDTOToJSON } from "../models/index";

export interface ShowsShowIdPeopleCsvGoogleGetRequest {
  showId: number;
}

export interface ShowsShowIdRosterGetRequest {
  showId: number;
}

/**
 *
 */
export class ShowsApi extends runtime.BaseAPI {
  /**
   * Returns a CSV file of people for a show compatible with google
   */
  async showsShowIdPeopleCsvGoogleGetRaw(
    requestParameters: ShowsShowIdPeopleCsvGoogleGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.showId === null ||
      requestParameters.showId === undefined
    ) {
      throw new runtime.RequiredError(
        "showId",
        "Required parameter requestParameters.showId was null or undefined when calling showsShowIdPeopleCsvGoogleGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/shows/{showId}/people/csv-google`.replace(
          `{${"showId"}}`,
          encodeURIComponent(String(requestParameters.showId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Returns a CSV file of people for a show compatible with google
   */
  async showsShowIdPeopleCsvGoogleGet(
    requestParameters: ShowsShowIdPeopleCsvGoogleGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.showsShowIdPeopleCsvGoogleGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get roster
   * Returns roster for a show
   */
  async showsShowIdRosterGetRaw(
    requestParameters: ShowsShowIdRosterGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RosterDTO>> {
    if (
      requestParameters.showId === null ||
      requestParameters.showId === undefined
    ) {
      throw new runtime.RequiredError(
        "showId",
        "Required parameter requestParameters.showId was null or undefined when calling showsShowIdRosterGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/shows/{showId}/roster`.replace(
          `{${"showId"}}`,
          encodeURIComponent(String(requestParameters.showId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RosterDTOFromJSON(jsonValue)
    );
  }

  /**
   * Get roster
   * Returns roster for a show
   */
  async showsShowIdRosterGet(
    requestParameters: ShowsShowIdRosterGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RosterDTO> {
    const response = await this.showsShowIdRosterGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
