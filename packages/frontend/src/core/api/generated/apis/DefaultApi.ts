/* tslint:disable */
/* eslint-disable */
/**
 * Showplanner backend
 * API description in Markdown.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssignedDTO,
  AvailabilitiesDTO,
  AvailabilityDTO,
  CreateAssignedDTO,
  CreateEventDTO,
  CreateShadowDTO,
  EventDTO,
  HealthCheck,
  MediaDTO,
  PersonDTOWithEmail,
  PublicScheduleGet200Response,
  RoleDTO,
  RoleUpdateDTO,
  RosterDTO,
  ScheduleEventDTO,
  UpdateAssignedDTO,
} from '../models/index';
import {
    AssignedDTOFromJSON,
    AssignedDTOToJSON,
    AvailabilitiesDTOFromJSON,
    AvailabilitiesDTOToJSON,
    AvailabilityDTOFromJSON,
    AvailabilityDTOToJSON,
    CreateAssignedDTOFromJSON,
    CreateAssignedDTOToJSON,
    CreateEventDTOFromJSON,
    CreateEventDTOToJSON,
    CreateShadowDTOFromJSON,
    CreateShadowDTOToJSON,
    EventDTOFromJSON,
    EventDTOToJSON,
    HealthCheckFromJSON,
    HealthCheckToJSON,
    MediaDTOFromJSON,
    MediaDTOToJSON,
    PersonDTOWithEmailFromJSON,
    PersonDTOWithEmailToJSON,
    PublicScheduleGet200ResponseFromJSON,
    PublicScheduleGet200ResponseToJSON,
    RoleDTOFromJSON,
    RoleDTOToJSON,
    RoleUpdateDTOFromJSON,
    RoleUpdateDTOToJSON,
    RosterDTOFromJSON,
    RosterDTOToJSON,
    ScheduleEventDTOFromJSON,
    ScheduleEventDTOToJSON,
    UpdateAssignedDTOFromJSON,
    UpdateAssignedDTOToJSON,
} from '../models/index';

export interface AssignmentIdDeleteRequest {
    id: number;
}

export interface AssignmentIdPutRequest {
    id: number;
    assignment?: UpdateAssignedDTO;
}

export interface AssignmentPostRequest {
    assignment?: CreateAssignedDTO;
}

export interface AvailabilitiesGetRequest {
    showId: number;
}

export interface AvailabilitiesPostRequest {
    availability?: AvailabilityDTO;
}

export interface EventsIdDeleteRequest {
    id: number;
}

export interface EventsIdGetRequest {
    id: number;
}

export interface EventsIdPostRequest {
    id: number;
    event?: CreateEventDTO;
}

export interface EventsPostRequest {
    event?: CreateEventDTO;
}

export interface MediaUploadPostRequest {
    file: Blob;
    key: string;
}

export interface PersonnelAssignedGetRequest {
    showId: number;
}

export interface PersonnelAssignedGoogleContactsCSVGetRequest {
    showId: number;
}

export interface PublicCalendarIdGetRequest {
    id: string;
    hideEvents?: boolean;
}

export interface PublicScheduleGetRequest {
    showSlug: string;
}

export interface RolesGetRequest {
    showId: number;
}

export interface RolesIdDeleteRequest {
    id: number;
}

export interface RolesIdPutRequest {
    id: number;
    roleDetails?: RoleUpdateDTO;
}

export interface RolesPostRequest {
    roleDetails?: RoleUpdateDTO;
}

export interface RosterGetRequest {
    showId: number;
}

export interface ScheduleGetRequest {
    showId: number;
}

export interface ShadowIdDeleteRequest {
    id: number;
}

export interface ShadowPostRequest {
    shadow?: CreateShadowDTO;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Deletes an assignment
     */
    async assignmentIdDeleteRaw(requestParameters: AssignmentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling assignmentIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/assignment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an assignment
     */
    async assignmentIdDelete(requestParameters: AssignmentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assignmentIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Assign a person to a role for an event
     */
    async assignmentIdPutRaw(requestParameters: AssignmentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssignedDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling assignmentIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/assignment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAssignedDTOToJSON(requestParameters.assignment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignedDTOFromJSON(jsonValue));
    }

    /**
     * Assign a person to a role for an event
     */
    async assignmentIdPut(requestParameters: AssignmentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssignedDTO> {
        const response = await this.assignmentIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign a person to a role for an event
     */
    async assignmentPostRaw(requestParameters: AssignmentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssignedDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/assignment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssignedDTOToJSON(requestParameters.assignment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignedDTOFromJSON(jsonValue));
    }

    /**
     * Assign a person to a role for an event
     */
    async assignmentPost(requestParameters: AssignmentPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssignedDTO> {
        const response = await this.assignmentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns availabilities for all the members of a show
     */
    async availabilitiesGetRaw(requestParameters: AvailabilitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailabilitiesDTO>> {
        if (requestParameters.showId === null || requestParameters.showId === undefined) {
            throw new runtime.RequiredError('showId','Required parameter requestParameters.showId was null or undefined when calling availabilitiesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.showId !== undefined) {
            queryParameters['showId'] = requestParameters.showId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/availabilities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailabilitiesDTOFromJSON(jsonValue));
    }

    /**
     * Returns availabilities for all the members of a show
     */
    async availabilitiesGet(requestParameters: AvailabilitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailabilitiesDTO> {
        const response = await this.availabilitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update availability
     */
    async availabilitiesPostRaw(requestParameters: AvailabilitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailabilityDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/availabilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AvailabilityDTOToJSON(requestParameters.availability),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailabilityDTOFromJSON(jsonValue));
    }

    /**
     * Create or update availability
     */
    async availabilitiesPost(requestParameters: AvailabilitiesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailabilityDTO> {
        const response = await this.availabilitiesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an event
     */
    async eventsIdDeleteRaw(requestParameters: EventsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an event
     */
    async eventsIdDelete(requestParameters: EventsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eventsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get an event
     */
    async eventsIdGetRaw(requestParameters: EventsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDTOFromJSON(jsonValue));
    }

    /**
     * Get an event
     */
    async eventsIdGet(requestParameters: EventsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDTO> {
        const response = await this.eventsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update event
     */
    async eventsIdPostRaw(requestParameters: EventsIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventsIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEventDTOToJSON(requestParameters.event),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update event
     */
    async eventsIdPost(requestParameters: EventsIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eventsIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Creates an event
     */
    async eventsPostRaw(requestParameters: EventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEventDTOToJSON(requestParameters.event),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDTOFromJSON(jsonValue));
    }

    /**
     * Creates an event
     */
    async eventsPost(requestParameters: EventsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDTO> {
        const response = await this.eventsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async mediaUploadPostRaw(requestParameters: MediaUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaDTO>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling mediaUploadPost.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling mediaUploadPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.key !== undefined) {
            formParams.append('key', requestParameters.key as any);
        }

        const response = await this.request({
            path: `/media/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaDTOFromJSON(jsonValue));
    }

    /**
     */
    async mediaUploadPost(requestParameters: MediaUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaDTO> {
        const response = await this.mediaUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns people for a show
     */
    async personnelAssignedGetRaw(requestParameters: PersonnelAssignedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PersonDTOWithEmail>>> {
        if (requestParameters.showId === null || requestParameters.showId === undefined) {
            throw new runtime.RequiredError('showId','Required parameter requestParameters.showId was null or undefined when calling personnelAssignedGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.showId !== undefined) {
            queryParameters['showId'] = requestParameters.showId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personnel/assigned`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonDTOWithEmailFromJSON));
    }

    /**
     * Returns people for a show
     */
    async personnelAssignedGet(requestParameters: PersonnelAssignedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PersonDTOWithEmail>> {
        const response = await this.personnelAssignedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns people for a show
     */
    async personnelAssignedGoogleContactsCSVGetRaw(requestParameters: PersonnelAssignedGoogleContactsCSVGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.showId === null || requestParameters.showId === undefined) {
            throw new runtime.RequiredError('showId','Required parameter requestParameters.showId was null or undefined when calling personnelAssignedGoogleContactsCSVGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.showId !== undefined) {
            queryParameters['showId'] = requestParameters.showId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/personnel/assigned/googleContactsCSV`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns people for a show
     */
    async personnelAssignedGoogleContactsCSVGet(requestParameters: PersonnelAssignedGoogleContactsCSVGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.personnelAssignedGoogleContactsCSVGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Healthcheck endpoint
     * Healthcheck
     */
    async publicCalendarIdGetRaw(requestParameters: PublicCalendarIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling publicCalendarIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.hideEvents !== undefined) {
            queryParameters['hideEvents'] = requestParameters.hideEvents;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/calendar/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Healthcheck endpoint
     * Healthcheck
     */
    async publicCalendarIdGet(requestParameters: PublicCalendarIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.publicCalendarIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Healthcheck endpoint
     * Healthcheck
     */
    async publicHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheck>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheckFromJSON(jsonValue));
    }

    /**
     * Healthcheck endpoint
     * Healthcheck
     */
    async publicHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheck> {
        const response = await this.publicHealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of events.
     */
    async publicScheduleGetRaw(requestParameters: PublicScheduleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicScheduleGet200Response>> {
        if (requestParameters.showSlug === null || requestParameters.showSlug === undefined) {
            throw new runtime.RequiredError('showSlug','Required parameter requestParameters.showSlug was null or undefined when calling publicScheduleGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.showSlug !== undefined) {
            queryParameters['showSlug'] = requestParameters.showSlug;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public/schedule`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicScheduleGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of events.
     */
    async publicScheduleGet(requestParameters: PublicScheduleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicScheduleGet200Response> {
        const response = await this.publicScheduleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of roles
     */
    async rolesGetRaw(requestParameters: RolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleDTO>>> {
        if (requestParameters.showId === null || requestParameters.showId === undefined) {
            throw new runtime.RequiredError('showId','Required parameter requestParameters.showId was null or undefined when calling rolesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.showId !== undefined) {
            queryParameters['showId'] = requestParameters.showId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleDTOFromJSON));
    }

    /**
     * Returns a list of roles
     */
    async rolesGet(requestParameters: RolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleDTO>> {
        const response = await this.rolesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a role
     */
    async rolesIdDeleteRaw(requestParameters: RolesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling rolesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a role
     */
    async rolesIdDelete(requestParameters: RolesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rolesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a role
     */
    async rolesIdPutRaw(requestParameters: RolesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling rolesIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleUpdateDTOToJSON(requestParameters.roleDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleDTOFromJSON(jsonValue));
    }

    /**
     * Updates a role
     */
    async rolesIdPut(requestParameters: RolesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleDTO> {
        const response = await this.rolesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new role
     */
    async rolesPostRaw(requestParameters: RolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleUpdateDTOToJSON(requestParameters.roleDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new role
     */
    async rolesPost(requestParameters: RolesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleDTO> {
        const response = await this.rolesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns roster for a show
     */
    async rosterGetRaw(requestParameters: RosterGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RosterDTO>> {
        if (requestParameters.showId === null || requestParameters.showId === undefined) {
            throw new runtime.RequiredError('showId','Required parameter requestParameters.showId was null or undefined when calling rosterGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.showId !== undefined) {
            queryParameters['showId'] = requestParameters.showId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roster`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RosterDTOFromJSON(jsonValue));
    }

    /**
     * Returns roster for a show
     */
    async rosterGet(requestParameters: RosterGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RosterDTO> {
        const response = await this.rosterGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of events.
     */
    async scheduleGetRaw(requestParameters: ScheduleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScheduleEventDTO>>> {
        if (requestParameters.showId === null || requestParameters.showId === undefined) {
            throw new runtime.RequiredError('showId','Required parameter requestParameters.showId was null or undefined when calling scheduleGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.showId !== undefined) {
            queryParameters['showId'] = requestParameters.showId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schedule`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScheduleEventDTOFromJSON));
    }

    /**
     * Returns a list of events.
     */
    async scheduleGet(requestParameters: ScheduleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScheduleEventDTO>> {
        const response = await this.scheduleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a shadow
     */
    async shadowIdDeleteRaw(requestParameters: ShadowIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling shadowIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/shadow/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a shadow
     */
    async shadowIdDelete(requestParameters: ShadowIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.shadowIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Assign a shadow to a role for an event
     */
    async shadowPostRaw(requestParameters: ShadowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shadow`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateShadowDTOToJSON(requestParameters.shadow),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Assign a shadow to a role for an event
     */
    async shadowPost(requestParameters: ShadowPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.shadowPostRaw(requestParameters, initOverrides);
    }

}
