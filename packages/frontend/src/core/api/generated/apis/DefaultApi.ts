/* tslint:disable */
/* eslint-disable */
/**
 * Showplanner backend
 * API description in Markdown.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEventDTO,
  CreateShowDTO,
  EventDTO,
  ShowDTO,
} from '../models/index';
import {
    CreateEventDTOFromJSON,
    CreateEventDTOToJSON,
    CreateShowDTOFromJSON,
    CreateShowDTOToJSON,
    EventDTOFromJSON,
    EventDTOToJSON,
    ShowDTOFromJSON,
    ShowDTOToJSON,
} from '../models/index';

export interface EventsGetRequest {
    showId: number;
}

export interface EventsIdPostRequest {
    id: string;
    event?: CreateEventDTO;
}

export interface EventsPostRequest {
    event?: CreateEventDTO;
}

export interface ShowsPostRequest {
    show?: CreateShowDTO;
}

export interface ShowsShowSlugGetRequest {
    showSlug: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns a list of events.
     */
    async eventsGetRaw(requestParameters: EventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EventDTO>>> {
        if (requestParameters.showId === null || requestParameters.showId === undefined) {
            throw new runtime.RequiredError('showId','Required parameter requestParameters.showId was null or undefined when calling eventsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.showId !== undefined) {
            queryParameters['showId'] = requestParameters.showId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // loggedIn authentication
        }

        const response = await this.request({
            path: `/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventDTOFromJSON));
    }

    /**
     * Returns a list of events.
     */
    async eventsGet(requestParameters: EventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EventDTO>> {
        const response = await this.eventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update event
     */
    async eventsIdPostRaw(requestParameters: EventsIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventsIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // loggedIn authentication
        }

        const response = await this.request({
            path: `/events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEventDTOToJSON(requestParameters.event),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowDTOFromJSON(jsonValue));
    }

    /**
     * Update event
     */
    async eventsIdPost(requestParameters: EventsIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowDTO> {
        const response = await this.eventsIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an event
     */
    async eventsPostRaw(requestParameters: EventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // loggedIn authentication
        }

        const response = await this.request({
            path: `/events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEventDTOToJSON(requestParameters.event),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDTOFromJSON(jsonValue));
    }

    /**
     * Creates an event
     */
    async eventsPost(requestParameters: EventsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDTO> {
        const response = await this.eventsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of shows
     */
    async showsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShowDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // loggedIn authentication
        }

        const response = await this.request({
            path: `/shows`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShowDTOFromJSON));
    }

    /**
     * Returns a list of shows
     */
    async showsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShowDTO>> {
        const response = await this.showsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates a show
     */
    async showsPostRaw(requestParameters: ShowsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // loggedIn authentication
        }

        const response = await this.request({
            path: `/shows`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateShowDTOToJSON(requestParameters.show),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowDTOFromJSON(jsonValue));
    }

    /**
     * Creates a show
     */
    async showsPost(requestParameters: ShowsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowDTO> {
        const response = await this.showsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return details about a show
     */
    async showsShowSlugGetRaw(requestParameters: ShowsShowSlugGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShowDTO>> {
        if (requestParameters.showSlug === null || requestParameters.showSlug === undefined) {
            throw new runtime.RequiredError('showSlug','Required parameter requestParameters.showSlug was null or undefined when calling showsShowSlugGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // loggedIn authentication
        }

        const response = await this.request({
            path: `/shows/{showSlug}`.replace(`{${"showSlug"}}`, encodeURIComponent(String(requestParameters.showSlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowDTOFromJSON(jsonValue));
    }

    /**
     * Return details about a show
     */
    async showsShowSlugGet(requestParameters: ShowsShowSlugGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShowDTO> {
        const response = await this.showsShowSlugGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Optional extended description in Markdown.
     * Returns a list of users.
     */
    async usersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Optional extended description in Markdown.
     * Returns a list of users.
     */
    async usersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersGetRaw(initOverrides);
    }

}
