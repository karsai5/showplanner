/* tslint:disable */
/* eslint-disable */
/**
 * Showplanner backend
 * API description in Markdown.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BaseShow,
  Event,
  Show,
} from '../models/index';
import {
    BaseShowFromJSON,
    BaseShowToJSON,
    EventFromJSON,
    EventToJSON,
    ShowFromJSON,
    ShowToJSON,
} from '../models/index';

export interface ShowsPostRequest {
    show?: BaseShow;
}

export interface ShowsShowSlugGetRequest {
    showSlug: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns a list of events.
     */
    async eventsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Event>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // loggedIn authentication
        }

        const response = await this.request({
            path: `/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventFromJSON));
    }

    /**
     * Returns a list of events.
     */
    async eventsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Event>> {
        const response = await this.eventsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of shows
     */
    async showsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BaseShow>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // loggedIn authentication
        }

        const response = await this.request({
            path: `/shows`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BaseShowFromJSON));
    }

    /**
     * Returns a list of shows
     */
    async showsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BaseShow>> {
        const response = await this.showsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates a show
     */
    async showsPostRaw(requestParameters: ShowsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseShow>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // loggedIn authentication
        }

        const response = await this.request({
            path: `/shows`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BaseShowToJSON(requestParameters.show),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseShowFromJSON(jsonValue));
    }

    /**
     * Creates a show
     */
    async showsPost(requestParameters: ShowsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseShow> {
        const response = await this.showsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return details about a show
     */
    async showsShowSlugGetRaw(requestParameters: ShowsShowSlugGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Show>> {
        if (requestParameters.showSlug === null || requestParameters.showSlug === undefined) {
            throw new runtime.RequiredError('showSlug','Required parameter requestParameters.showSlug was null or undefined when calling showsShowSlugGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // loggedIn authentication
        }

        const response = await this.request({
            path: `/shows/{showSlug}`.replace(`{${"showSlug"}}`, encodeURIComponent(String(requestParameters.showSlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShowFromJSON(jsonValue));
    }

    /**
     * Return details about a show
     */
    async showsShowSlugGet(requestParameters: ShowsShowSlugGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Show> {
        const response = await this.showsShowSlugGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Optional extended description in Markdown.
     * Returns a list of users.
     */
    async usersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Optional extended description in Markdown.
     * Returns a list of users.
     */
    async usersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.usersGetRaw(initOverrides);
    }

}
