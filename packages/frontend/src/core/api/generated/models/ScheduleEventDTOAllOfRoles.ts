/* tslint:disable */
/* eslint-disable */
/**
 * Showplanner backend
 * API description in Markdown.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { PersonSummaryDTO } from "./PersonSummaryDTO";
import {
  PersonSummaryDTOFromJSON,
  PersonSummaryDTOFromJSONTyped,
  PersonSummaryDTOToJSON,
} from "./PersonSummaryDTO";

/**
 *
 * @export
 * @interface ScheduleEventDTOAllOfRoles
 */
export interface ScheduleEventDTOAllOfRoles {
  /**
   *
   * @type {number}
   * @memberof ScheduleEventDTOAllOfRoles
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ScheduleEventDTOAllOfRoles
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ScheduleEventDTOAllOfRoles
   */
  type?: ScheduleEventDTOAllOfRolesTypeEnum;
  /**
   *
   * @type {PersonSummaryDTO}
   * @memberof ScheduleEventDTOAllOfRoles
   */
  covering?: PersonSummaryDTO;
  /**
   *
   * @type {PersonSummaryDTO}
   * @memberof ScheduleEventDTOAllOfRoles
   */
  shadowing?: PersonSummaryDTO;
  /**
   *
   * @type {PersonSummaryDTO}
   * @memberof ScheduleEventDTOAllOfRoles
   */
  coveredBy?: PersonSummaryDTO;
  /**
   *
   * @type {Array<PersonSummaryDTO>}
   * @memberof ScheduleEventDTOAllOfRoles
   */
  shadowedBy?: Array<PersonSummaryDTO>;
}

/**
 * @export
 */
export const ScheduleEventDTOAllOfRolesTypeEnum = {
  BaseRole: "baseRole",
  Assigned: "assigned",
  Covering: "covering",
  Shadowing: "shadowing",
} as const;
export type ScheduleEventDTOAllOfRolesTypeEnum = typeof ScheduleEventDTOAllOfRolesTypeEnum[keyof typeof ScheduleEventDTOAllOfRolesTypeEnum];

/**
 * Check if a given object implements the ScheduleEventDTOAllOfRoles interface.
 */
export function instanceOfScheduleEventDTOAllOfRoles(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "name" in value;

  return isInstance;
}

export function ScheduleEventDTOAllOfRolesFromJSON(
  json: any
): ScheduleEventDTOAllOfRoles {
  return ScheduleEventDTOAllOfRolesFromJSONTyped(json, false);
}

export function ScheduleEventDTOAllOfRolesFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ScheduleEventDTOAllOfRoles {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json["id"],
    name: json["name"],
    type: !exists(json, "type") ? undefined : json["type"],
    covering: !exists(json, "covering")
      ? undefined
      : PersonSummaryDTOFromJSON(json["covering"]),
    shadowing: !exists(json, "shadowing")
      ? undefined
      : PersonSummaryDTOFromJSON(json["shadowing"]),
    coveredBy: !exists(json, "coveredBy")
      ? undefined
      : PersonSummaryDTOFromJSON(json["coveredBy"]),
    shadowedBy: !exists(json, "shadowedBy")
      ? undefined
      : (json["shadowedBy"] as Array<any>).map(PersonSummaryDTOFromJSON),
  };
}

export function ScheduleEventDTOAllOfRolesToJSON(
  value?: ScheduleEventDTOAllOfRoles | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    type: value.type,
    covering: PersonSummaryDTOToJSON(value.covering),
    shadowing: PersonSummaryDTOToJSON(value.shadowing),
    coveredBy: PersonSummaryDTOToJSON(value.coveredBy),
    shadowedBy:
      value.shadowedBy === undefined
        ? undefined
        : (value.shadowedBy as Array<any>).map(PersonSummaryDTOToJSON),
  };
}
