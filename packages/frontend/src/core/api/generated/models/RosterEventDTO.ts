/* tslint:disable */
/* eslint-disable */
/**
 * Showplanner backend
 * API description in Markdown.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { AvailabilityDTO } from "./AvailabilityDTO";
import {
  AvailabilityDTOFromJSON,
  AvailabilityDTOFromJSONTyped,
  AvailabilityDTOToJSON,
} from "./AvailabilityDTO";
import type { EventOptionsDTO } from "./EventOptionsDTO";
import {
  EventOptionsDTOFromJSON,
  EventOptionsDTOFromJSONTyped,
  EventOptionsDTOToJSON,
} from "./EventOptionsDTO";
import type { RosterAssignedDTO } from "./RosterAssignedDTO";
import {
  RosterAssignedDTOFromJSON,
  RosterAssignedDTOFromJSONTyped,
  RosterAssignedDTOToJSON,
} from "./RosterAssignedDTO";
import type { RosterWarningDTO } from "./RosterWarningDTO";
import {
  RosterWarningDTOFromJSON,
  RosterWarningDTOFromJSONTyped,
  RosterWarningDTOToJSON,
} from "./RosterWarningDTO";
import type { ShadowDTO } from "./ShadowDTO";
import {
  ShadowDTOFromJSON,
  ShadowDTOFromJSONTyped,
  ShadowDTOToJSON,
} from "./ShadowDTO";

/**
 *
 * @export
 * @interface RosterEventDTO
 */
export interface RosterEventDTO {
  /**
   *
   * @type {number}
   * @memberof RosterEventDTO
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof RosterEventDTO
   */
  showId?: number;
  /**
   *
   * @type {Date}
   * @memberof RosterEventDTO
   */
  start: Date;
  /**
   *
   * @type {string}
   * @memberof RosterEventDTO
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof RosterEventDTO
   */
  nameRaw?: string | null;
  /**
   *
   * @type {string}
   * @memberof RosterEventDTO
   */
  shortnote?: string | null;
  /**
   *
   * @type {string}
   * @memberof RosterEventDTO
   */
  address?: string | null;
  /**
   *
   * @type {Date}
   * @memberof RosterEventDTO
   */
  curtainsUp?: Date | null;
  /**
   *
   * @type {Date}
   * @memberof RosterEventDTO
   */
  end?: Date | null;
  /**
   *
   * @type {string}
   * @memberof RosterEventDTO
   */
  showReport?: string | null;
  /**
   *
   * @type {string}
   * @memberof RosterEventDTO
   */
  showTimer?: string | null;
  /**
   *
   * @type {EventOptionsDTO}
   * @memberof RosterEventDTO
   */
  options?: EventOptionsDTO;
  /**
   * A map of availabilities to personId
   * @type {{ [key: string]: AvailabilityDTO; }}
   * @memberof RosterEventDTO
   */
  availabilities?: { [key: string]: AvailabilityDTO };
  /**
   * A map of assignments to roleId
   * @type {{ [key: string]: RosterAssignedDTO; }}
   * @memberof RosterEventDTO
   */
  assignments?: { [key: string]: RosterAssignedDTO };
  /**
   * A map of shadows to roleId
   * @type {{ [key: string]: Array<ShadowDTO>; }}
   * @memberof RosterEventDTO
   */
  shadows?: { [key: string]: Array<ShadowDTO> };
  /**
   *
   * @type {Array<RosterWarningDTO>}
   * @memberof RosterEventDTO
   */
  warnings?: Array<RosterWarningDTO>;
}

/**
 * Check if a given object implements the RosterEventDTO interface.
 */
export function instanceOfRosterEventDTO(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "start" in value;

  return isInstance;
}

export function RosterEventDTOFromJSON(json: any): RosterEventDTO {
  return RosterEventDTOFromJSONTyped(json, false);
}

export function RosterEventDTOFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): RosterEventDTO {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json["id"],
    showId: !exists(json, "showId") ? undefined : json["showId"],
    start: new Date(json["start"]),
    name: !exists(json, "name") ? undefined : json["name"],
    nameRaw: !exists(json, "nameRaw") ? undefined : json["nameRaw"],
    shortnote: !exists(json, "shortnote") ? undefined : json["shortnote"],
    address: !exists(json, "address") ? undefined : json["address"],
    curtainsUp: !exists(json, "curtainsUp")
      ? undefined
      : json["curtainsUp"] === null
      ? null
      : new Date(json["curtainsUp"]),
    end: !exists(json, "end")
      ? undefined
      : json["end"] === null
      ? null
      : new Date(json["end"]),
    showReport: !exists(json, "showReport") ? undefined : json["showReport"],
    showTimer: !exists(json, "showTimer") ? undefined : json["showTimer"],
    options: !exists(json, "options")
      ? undefined
      : EventOptionsDTOFromJSON(json["options"]),
    availabilities: !exists(json, "availabilities")
      ? undefined
      : mapValues(json["availabilities"], AvailabilityDTOFromJSON),
    assignments: !exists(json, "assignments")
      ? undefined
      : mapValues(json["assignments"], RosterAssignedDTOFromJSON),
    shadows: !exists(json, "shadows") ? undefined : json["shadows"],
    warnings: !exists(json, "warnings")
      ? undefined
      : (json["warnings"] as Array<any>).map(RosterWarningDTOFromJSON),
  };
}

export function RosterEventDTOToJSON(value?: RosterEventDTO | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    showId: value.showId,
    start: value.start.toISOString(),
    name: value.name,
    nameRaw: value.nameRaw,
    shortnote: value.shortnote,
    address: value.address,
    curtainsUp:
      value.curtainsUp === undefined
        ? undefined
        : value.curtainsUp === null
        ? null
        : value.curtainsUp.toISOString(),
    end:
      value.end === undefined
        ? undefined
        : value.end === null
        ? null
        : value.end.toISOString(),
    showReport: value.showReport,
    showTimer: value.showTimer,
    options: EventOptionsDTOToJSON(value.options),
    availabilities:
      value.availabilities === undefined
        ? undefined
        : mapValues(value.availabilities, AvailabilityDTOToJSON),
    assignments:
      value.assignments === undefined
        ? undefined
        : mapValues(value.assignments, RosterAssignedDTOToJSON),
    shadows: value.shadows,
    warnings:
      value.warnings === undefined
        ? undefined
        : (value.warnings as Array<any>).map(RosterWarningDTOToJSON),
  };
}
