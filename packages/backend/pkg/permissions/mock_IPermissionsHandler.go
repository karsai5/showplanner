// Code generated by mockery. DO NOT EDIT.

package permissions

import (
	http "net/http"

	uuid "github.com/satori/go.uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockIPermissionsHandler is an autogenerated mock type for the IPermissionsHandler type
type MockIPermissionsHandler struct {
	mock.Mock
}

type MockIPermissionsHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIPermissionsHandler) EXPECT() *MockIPermissionsHandler_Expecter {
	return &MockIPermissionsHandler_Expecter{mock: &_m.Mock}
}

// GetUserId provides a mock function with given fields: r
func (_m *MockIPermissionsHandler) GetUserId(r *http.Request) (uuid.UUID, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetUserId")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (uuid.UUID, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) uuid.UUID); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPermissionsHandler_GetUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserId'
type MockIPermissionsHandler_GetUserId_Call struct {
	*mock.Call
}

// GetUserId is a helper method to define mock.On call
//   - r *http.Request
func (_e *MockIPermissionsHandler_Expecter) GetUserId(r interface{}) *MockIPermissionsHandler_GetUserId_Call {
	return &MockIPermissionsHandler_GetUserId_Call{Call: _e.mock.On("GetUserId", r)}
}

func (_c *MockIPermissionsHandler_GetUserId_Call) Run(run func(r *http.Request)) *MockIPermissionsHandler_GetUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockIPermissionsHandler_GetUserId_Call) Return(_a0 uuid.UUID, _a1 error) *MockIPermissionsHandler_GetUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPermissionsHandler_GetUserId_Call) RunAndReturn(run func(*http.Request) (uuid.UUID, error)) *MockIPermissionsHandler_GetUserId_Call {
	_c.Call.Return(run)
	return _c
}

// HasPermission provides a mock function with given fields: r, permission
func (_m *MockIPermissionsHandler) HasPermission(r *http.Request, permission string) (bool, error) {
	ret := _m.Called(r, permission)

	if len(ret) == 0 {
		panic("no return value specified for HasPermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, string) (bool, error)); ok {
		return rf(r, permission)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, string) bool); ok {
		r0 = rf(r, permission)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(r, permission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPermissionsHandler_HasPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPermission'
type MockIPermissionsHandler_HasPermission_Call struct {
	*mock.Call
}

// HasPermission is a helper method to define mock.On call
//   - r *http.Request
//   - permission string
func (_e *MockIPermissionsHandler_Expecter) HasPermission(r interface{}, permission interface{}) *MockIPermissionsHandler_HasPermission_Call {
	return &MockIPermissionsHandler_HasPermission_Call{Call: _e.mock.On("HasPermission", r, permission)}
}

func (_c *MockIPermissionsHandler_HasPermission_Call) Run(run func(r *http.Request, permission string)) *MockIPermissionsHandler_HasPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(string))
	})
	return _c
}

func (_c *MockIPermissionsHandler_HasPermission_Call) Return(_a0 bool, _a1 error) *MockIPermissionsHandler_HasPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPermissionsHandler_HasPermission_Call) RunAndReturn(run func(*http.Request, string) (bool, error)) *MockIPermissionsHandler_HasPermission_Call {
	_c.Call.Return(run)
	return _c
}

// HasRole provides a mock function with given fields: r, role
func (_m *MockIPermissionsHandler) HasRole(r *http.Request, role string) (bool, error) {
	ret := _m.Called(r, role)

	if len(ret) == 0 {
		panic("no return value specified for HasRole")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, string) (bool, error)); ok {
		return rf(r, role)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, string) bool); ok {
		r0 = rf(r, role)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(r, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPermissionsHandler_HasRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasRole'
type MockIPermissionsHandler_HasRole_Call struct {
	*mock.Call
}

// HasRole is a helper method to define mock.On call
//   - r *http.Request
//   - role string
func (_e *MockIPermissionsHandler_Expecter) HasRole(r interface{}, role interface{}) *MockIPermissionsHandler_HasRole_Call {
	return &MockIPermissionsHandler_HasRole_Call{Call: _e.mock.On("HasRole", r, role)}
}

func (_c *MockIPermissionsHandler_HasRole_Call) Run(run func(r *http.Request, role string)) *MockIPermissionsHandler_HasRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(string))
	})
	return _c
}

func (_c *MockIPermissionsHandler_HasRole_Call) Return(_a0 bool, _a1 error) *MockIPermissionsHandler_HasRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPermissionsHandler_HasRole_Call) RunAndReturn(run func(*http.Request, string) (bool, error)) *MockIPermissionsHandler_HasRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIPermissionsHandler creates a new instance of MockIPermissionsHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPermissionsHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPermissionsHandler {
	mock := &MockIPermissionsHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
