// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateShowTimerDTO update show timer d t o
//
// swagger:model updateShowTimerDTO
type UpdateShowTimerDTO struct {

	// act one f o h clearance
	// Format: date-time
	ActOneFOHClearance *strfmt.DateTime `json:"actOneFOHClearance,omitempty"`

	// act two f o h clearance
	// Format: date-time
	ActTwoFOHClearance *strfmt.DateTime `json:"actTwoFOHClearance,omitempty"`

	// event Id
	EventID *int64 `json:"eventId,omitempty"`

	// expected curtains up
	// Format: date-time
	ExpectedCurtainsUp *strfmt.DateTime `json:"expectedCurtainsUp,omitempty"`

	// house open
	// Format: date-time
	HouseOpen *strfmt.DateTime `json:"houseOpen,omitempty"`

	// interval end
	// Format: date-time
	IntervalEnd *strfmt.DateTime `json:"intervalEnd,omitempty"`

	// interval start
	// Format: date-time
	IntervalStart *strfmt.DateTime `json:"intervalStart,omitempty"`

	// show end
	// Format: date-time
	ShowEnd *strfmt.DateTime `json:"showEnd,omitempty"`

	// show start
	// Format: date-time
	ShowStart *strfmt.DateTime `json:"showStart,omitempty"`
}

// Validate validates this update show timer d t o
func (m *UpdateShowTimerDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActOneFOHClearance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActTwoFOHClearance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedCurtainsUp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHouseOpen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntervalEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntervalStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShowEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShowStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateShowTimerDTO) validateActOneFOHClearance(formats strfmt.Registry) error {
	if swag.IsZero(m.ActOneFOHClearance) { // not required
		return nil
	}

	if err := validate.FormatOf("actOneFOHClearance", "body", "date-time", m.ActOneFOHClearance.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateShowTimerDTO) validateActTwoFOHClearance(formats strfmt.Registry) error {
	if swag.IsZero(m.ActTwoFOHClearance) { // not required
		return nil
	}

	if err := validate.FormatOf("actTwoFOHClearance", "body", "date-time", m.ActTwoFOHClearance.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateShowTimerDTO) validateExpectedCurtainsUp(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpectedCurtainsUp) { // not required
		return nil
	}

	if err := validate.FormatOf("expectedCurtainsUp", "body", "date-time", m.ExpectedCurtainsUp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateShowTimerDTO) validateHouseOpen(formats strfmt.Registry) error {
	if swag.IsZero(m.HouseOpen) { // not required
		return nil
	}

	if err := validate.FormatOf("houseOpen", "body", "date-time", m.HouseOpen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateShowTimerDTO) validateIntervalEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.IntervalEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("intervalEnd", "body", "date-time", m.IntervalEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateShowTimerDTO) validateIntervalStart(formats strfmt.Registry) error {
	if swag.IsZero(m.IntervalStart) { // not required
		return nil
	}

	if err := validate.FormatOf("intervalStart", "body", "date-time", m.IntervalStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateShowTimerDTO) validateShowEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.ShowEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("showEnd", "body", "date-time", m.ShowEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateShowTimerDTO) validateShowStart(formats strfmt.Registry) error {
	if swag.IsZero(m.ShowStart) { // not required
		return nil
	}

	if err := validate.FormatOf("showStart", "body", "date-time", m.ShowStart.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update show timer d t o based on context it is used
func (m *UpdateShowTimerDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateShowTimerDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateShowTimerDTO) UnmarshalBinary(b []byte) error {
	var res UpdateShowTimerDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
