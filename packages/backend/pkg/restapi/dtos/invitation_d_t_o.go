// Code generated by go-swagger; DO NOT EDIT.

package dtos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvitationDTO invitation d t o
//
// swagger:model invitationDTO
type InvitationDTO struct {

	// date created
	// Format: date-time
	DateCreated strfmt.DateTime `json:"dateCreated,omitempty"`

	// email
	// Format: email
	Email *strfmt.Email `json:"email,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// person
	Person *PersonSummaryDTO `json:"person,omitempty"`

	// show
	Show *ShowDTO `json:"show,omitempty"`
}

// Validate validates this invitation d t o
func (m *InvitationDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerson(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvitationDTO) validateDateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DateCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("dateCreated", "body", "date-time", m.DateCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InvitationDTO) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InvitationDTO) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InvitationDTO) validatePerson(formats strfmt.Registry) error {
	if swag.IsZero(m.Person) { // not required
		return nil
	}

	if m.Person != nil {
		if err := m.Person.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("person")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("person")
			}
			return err
		}
	}

	return nil
}

func (m *InvitationDTO) validateShow(formats strfmt.Registry) error {
	if swag.IsZero(m.Show) { // not required
		return nil
	}

	if m.Show != nil {
		if err := m.Show.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("show")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("show")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this invitation d t o based on the context it is used
func (m *InvitationDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePerson(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvitationDTO) contextValidatePerson(ctx context.Context, formats strfmt.Registry) error {

	if m.Person != nil {

		if swag.IsZero(m.Person) { // not required
			return nil
		}

		if err := m.Person.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("person")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("person")
			}
			return err
		}
	}

	return nil
}

func (m *InvitationDTO) contextValidateShow(ctx context.Context, formats strfmt.Registry) error {

	if m.Show != nil {

		if swag.IsZero(m.Show) { // not required
			return nil
		}

		if err := m.Show.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("show")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("show")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvitationDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvitationDTO) UnmarshalBinary(b []byte) error {
	var res InvitationDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
