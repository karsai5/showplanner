// Code generated by go-swagger; DO NOT EDIT.

package dtos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RosterEventDTO roster event d t o
//
// swagger:model rosterEventDTO
type RosterEventDTO struct {
	EventDTO

	// assignments
	Assignments *RosterEventDTOAO1Assignments `json:"assignments,omitempty"`

	// availabilities
	Availabilities *RosterEventDTOAO1Availabilities `json:"availabilities,omitempty"`

	// A map of shadows to roleId
	Shadows map[string][]ShadowDTO `json:"shadows,omitempty"`

	// warnings
	Warnings []*RosterWarningDTO `json:"warnings"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RosterEventDTO) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EventDTO
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EventDTO = aO0

	// AO1
	var dataAO1 struct {
		Assignments *RosterEventDTOAO1Assignments `json:"assignments,omitempty"`

		Availabilities *RosterEventDTOAO1Availabilities `json:"availabilities,omitempty"`

		Shadows map[string][]ShadowDTO `json:"shadows,omitempty"`

		Warnings []*RosterWarningDTO `json:"warnings"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Assignments = dataAO1.Assignments

	m.Availabilities = dataAO1.Availabilities

	m.Shadows = dataAO1.Shadows

	m.Warnings = dataAO1.Warnings

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RosterEventDTO) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EventDTO)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Assignments *RosterEventDTOAO1Assignments `json:"assignments,omitempty"`

		Availabilities *RosterEventDTOAO1Availabilities `json:"availabilities,omitempty"`

		Shadows map[string][]ShadowDTO `json:"shadows,omitempty"`

		Warnings []*RosterWarningDTO `json:"warnings"`
	}

	dataAO1.Assignments = m.Assignments

	dataAO1.Availabilities = m.Availabilities

	dataAO1.Shadows = m.Shadows

	dataAO1.Warnings = m.Warnings

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this roster event d t o
func (m *RosterEventDTO) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EventDTO
	if err := m.EventDTO.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShadows(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RosterEventDTO) validateAssignments(formats strfmt.Registry) error {

	if swag.IsZero(m.Assignments) { // not required
		return nil
	}

	if m.Assignments != nil {
		if err := m.Assignments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assignments")
			}
			return err
		}
	}

	return nil
}

func (m *RosterEventDTO) validateAvailabilities(formats strfmt.Registry) error {

	if swag.IsZero(m.Availabilities) { // not required
		return nil
	}

	if m.Availabilities != nil {
		if err := m.Availabilities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilities")
			}
			return err
		}
	}

	return nil
}

func (m *RosterEventDTO) validateShadows(formats strfmt.Registry) error {

	if swag.IsZero(m.Shadows) { // not required
		return nil
	}

	for k := range m.Shadows {

		if err := validate.Required("shadows"+"."+k, "body", m.Shadows[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.Shadows[k]); i++ {

			if err := m.Shadows[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shadows" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shadows" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *RosterEventDTO) validateWarnings(formats strfmt.Registry) error {

	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	for i := 0; i < len(m.Warnings); i++ {
		if swag.IsZero(m.Warnings[i]) { // not required
			continue
		}

		if m.Warnings[i] != nil {
			if err := m.Warnings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this roster event d t o based on the context it is used
func (m *RosterEventDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EventDTO
	if err := m.EventDTO.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssignments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAvailabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShadows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RosterEventDTO) contextValidateAssignments(ctx context.Context, formats strfmt.Registry) error {

	if m.Assignments != nil {

		if swag.IsZero(m.Assignments) { // not required
			return nil
		}

		if err := m.Assignments.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assignments")
			}
			return err
		}
	}

	return nil
}

func (m *RosterEventDTO) contextValidateAvailabilities(ctx context.Context, formats strfmt.Registry) error {

	if m.Availabilities != nil {

		if swag.IsZero(m.Availabilities) { // not required
			return nil
		}

		if err := m.Availabilities.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilities")
			}
			return err
		}
	}

	return nil
}

func (m *RosterEventDTO) contextValidateShadows(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Shadows {

		for i := 0; i < len(m.Shadows[k]); i++ {

			if swag.IsZero(m.Shadows[k][i]) { // not required
				return nil
			}

			if err := m.Shadows[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shadows" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shadows" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *RosterEventDTO) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Warnings); i++ {

		if m.Warnings[i] != nil {

			if swag.IsZero(m.Warnings[i]) { // not required
				return nil
			}

			if err := m.Warnings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RosterEventDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RosterEventDTO) UnmarshalBinary(b []byte) error {
	var res RosterEventDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RosterEventDTOAO1Assignments A map of assignments to roleId
//
// swagger:model RosterEventDTOAO1Assignments
type RosterEventDTOAO1Assignments struct {

	// default
	Default *RosterAssignedDTO `json:"default,omitempty"`

	// roster event d t o a o1 assignments
	// Required: true
	RosterEventDTOAO1Assignments map[string]*RosterAssignedDTO `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *RosterEventDTOAO1Assignments) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// default
		Default *RosterAssignedDTO `json:"default,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv RosterEventDTOAO1Assignments

	rcv.Default = stage1.Default
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "default")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]*RosterAssignedDTO)
		for k, v := range stage2 {
			var toadd *RosterAssignedDTO
			if err := json.Unmarshal(v, toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.RosterEventDTOAO1Assignments = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m RosterEventDTOAO1Assignments) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// default
		Default *RosterAssignedDTO `json:"default,omitempty"`
	}

	stage1.Default = m.Default

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.RosterEventDTOAO1Assignments) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.RosterEventDTOAO1Assignments)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this roster event d t o a o1 assignments
func (m *RosterEventDTOAO1Assignments) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	for k := range m.RosterEventDTOAO1Assignments {

		if err := validate.Required("assignments"+"."+k, "body", m.RosterEventDTOAO1Assignments[k]); err != nil {
			return err
		}
		if val, ok := m.RosterEventDTOAO1Assignments[k]; ok {
			if val != nil {
				if err := val.Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("assignments" + "." + k)
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("assignments" + "." + k)
					}
					return err
				}
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RosterEventDTOAO1Assignments) validateDefault(formats strfmt.Registry) error {
	if swag.IsZero(m.Default) { // not required
		return nil
	}

	if m.Default != nil {
		if err := m.Default.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignments" + "." + "default")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assignments" + "." + "default")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this roster event d t o a o1 assignments based on the context it is used
func (m *RosterEventDTOAO1Assignments) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefault(ctx, formats); err != nil {
		res = append(res, err)
	}

	for k := range m.RosterEventDTOAO1Assignments {

		if val, ok := m.RosterEventDTOAO1Assignments[k]; ok {
			if val != nil {
				if err := val.ContextValidate(ctx, formats); err != nil {
					return err
				}
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RosterEventDTOAO1Assignments) contextValidateDefault(ctx context.Context, formats strfmt.Registry) error {

	if m.Default != nil {

		if swag.IsZero(m.Default) { // not required
			return nil
		}

		if err := m.Default.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignments" + "." + "default")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assignments" + "." + "default")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RosterEventDTOAO1Assignments) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RosterEventDTOAO1Assignments) UnmarshalBinary(b []byte) error {
	var res RosterEventDTOAO1Assignments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RosterEventDTOAO1Availabilities A map of availabilities to personId
//
// swagger:model RosterEventDTOAO1Availabilities
type RosterEventDTOAO1Availabilities struct {

	// default
	Default *AvailabilityDTO `json:"default,omitempty"`

	// roster event d t o a o1 availabilities
	// Required: true
	RosterEventDTOAO1Availabilities map[string]*AvailabilityDTO `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *RosterEventDTOAO1Availabilities) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// default
		Default *AvailabilityDTO `json:"default,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv RosterEventDTOAO1Availabilities

	rcv.Default = stage1.Default
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "default")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]*AvailabilityDTO)
		for k, v := range stage2 {
			var toadd *AvailabilityDTO
			if err := json.Unmarshal(v, toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.RosterEventDTOAO1Availabilities = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m RosterEventDTOAO1Availabilities) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// default
		Default *AvailabilityDTO `json:"default,omitempty"`
	}

	stage1.Default = m.Default

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.RosterEventDTOAO1Availabilities) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.RosterEventDTOAO1Availabilities)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this roster event d t o a o1 availabilities
func (m *RosterEventDTOAO1Availabilities) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	for k := range m.RosterEventDTOAO1Availabilities {

		if err := validate.Required("availabilities"+"."+k, "body", m.RosterEventDTOAO1Availabilities[k]); err != nil {
			return err
		}
		if val, ok := m.RosterEventDTOAO1Availabilities[k]; ok {
			if val != nil {
				if err := val.Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("availabilities" + "." + k)
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("availabilities" + "." + k)
					}
					return err
				}
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RosterEventDTOAO1Availabilities) validateDefault(formats strfmt.Registry) error {
	if swag.IsZero(m.Default) { // not required
		return nil
	}

	if m.Default != nil {
		if err := m.Default.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilities" + "." + "default")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilities" + "." + "default")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this roster event d t o a o1 availabilities based on the context it is used
func (m *RosterEventDTOAO1Availabilities) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefault(ctx, formats); err != nil {
		res = append(res, err)
	}

	for k := range m.RosterEventDTOAO1Availabilities {

		if val, ok := m.RosterEventDTOAO1Availabilities[k]; ok {
			if val != nil {
				if err := val.ContextValidate(ctx, formats); err != nil {
					return err
				}
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RosterEventDTOAO1Availabilities) contextValidateDefault(ctx context.Context, formats strfmt.Registry) error {

	if m.Default != nil {

		if swag.IsZero(m.Default) { // not required
			return nil
		}

		if err := m.Default.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availabilities" + "." + "default")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availabilities" + "." + "default")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RosterEventDTOAO1Availabilities) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RosterEventDTOAO1Availabilities) UnmarshalBinary(b []byte) error {
	var res RosterEventDTOAO1Availabilities
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
