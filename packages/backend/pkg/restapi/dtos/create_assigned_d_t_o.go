// Code generated by go-swagger; DO NOT EDIT.

package dtos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateAssignedDTO create assigned d t o
//
// swagger:model createAssignedDTO
type CreateAssignedDTO struct {

	// event Id
	// Required: true
	EventID *int64 `json:"eventId"`

	// person Id
	// Required: true
	// Format: uuid
	PersonID *strfmt.UUID `json:"personId"`

	// role Id
	// Required: true
	RoleID *int64 `json:"roleId"`
}

// Validate validates this create assigned d t o
func (m *CreateAssignedDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAssignedDTO) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("eventId", "body", m.EventID); err != nil {
		return err
	}

	return nil
}

func (m *CreateAssignedDTO) validatePersonID(formats strfmt.Registry) error {

	if err := validate.Required("personId", "body", m.PersonID); err != nil {
		return err
	}

	if err := validate.FormatOf("personId", "body", "uuid", m.PersonID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateAssignedDTO) validateRoleID(formats strfmt.Registry) error {

	if err := validate.Required("roleId", "body", m.RoleID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create assigned d t o based on context it is used
func (m *CreateAssignedDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateAssignedDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAssignedDTO) UnmarshalBinary(b []byte) error {
	var res CreateAssignedDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
