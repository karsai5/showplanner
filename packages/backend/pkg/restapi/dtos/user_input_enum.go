// Code generated by go-swagger; DO NOT EDIT.

package dtos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UserInputEnum user input enum
//
// swagger:model userInputEnum
type UserInputEnum string

func NewUserInputEnum(value UserInputEnum) *UserInputEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated UserInputEnum.
func (m UserInputEnum) Pointer() *UserInputEnum {
	return &m
}

const (

	// UserInputEnumAvailability captures enum value "availability"
	UserInputEnumAvailability UserInputEnum = "availability"

	// UserInputEnumAttendance captures enum value "attendance"
	UserInputEnumAttendance UserInputEnum = "attendance"

	// UserInputEnumNone captures enum value "none"
	UserInputEnumNone UserInputEnum = "none"
)

// for schema
var userInputEnumEnum []interface{}

func init() {
	var res []UserInputEnum
	if err := json.Unmarshal([]byte(`["availability","attendance","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userInputEnumEnum = append(userInputEnumEnum, v)
	}
}

func (m UserInputEnum) validateUserInputEnumEnum(path, location string, value UserInputEnum) error {
	if err := validate.EnumCase(path, location, value, userInputEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this user input enum
func (m UserInputEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUserInputEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this user input enum based on context it is used
func (m UserInputEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
