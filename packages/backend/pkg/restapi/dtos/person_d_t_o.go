// Code generated by go-swagger; DO NOT EDIT.

package dtos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PersonDTO person d t o
//
// swagger:model personDTO
type PersonDTO struct {

	// first name
	// Required: true
	FirstName *string `json:"firstName"`

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// last name
	// Required: true
	LastName *string `json:"lastName"`

	// preferred name
	PreferredName string `json:"preferredName,omitempty"`

	// private
	Private *PersonPrivateDetailsDTO `json:"private,omitempty"`
}

// Validate validates this person d t o
func (m *PersonDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PersonDTO) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *PersonDTO) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PersonDTO) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *PersonDTO) validatePrivate(formats strfmt.Registry) error {
	if swag.IsZero(m.Private) { // not required
		return nil
	}

	if m.Private != nil {
		if err := m.Private.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("private")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this person d t o based on the context it is used
func (m *PersonDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrivate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PersonDTO) contextValidatePrivate(ctx context.Context, formats strfmt.Registry) error {

	if m.Private != nil {

		if swag.IsZero(m.Private) { // not required
			return nil
		}

		if err := m.Private.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("private")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PersonDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PersonDTO) UnmarshalBinary(b []byte) error {
	var res PersonDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
