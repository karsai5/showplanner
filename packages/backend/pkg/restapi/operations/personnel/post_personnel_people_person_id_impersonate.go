// Code generated by go-swagger; DO NOT EDIT.

package personnel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostPersonnelPeoplePersonIDImpersonateHandlerFunc turns a function with the right signature into a post personnel people person ID impersonate handler
type PostPersonnelPeoplePersonIDImpersonateHandlerFunc func(PostPersonnelPeoplePersonIDImpersonateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostPersonnelPeoplePersonIDImpersonateHandlerFunc) Handle(params PostPersonnelPeoplePersonIDImpersonateParams) middleware.Responder {
	return fn(params)
}

// PostPersonnelPeoplePersonIDImpersonateHandler interface for that can handle valid post personnel people person ID impersonate params
type PostPersonnelPeoplePersonIDImpersonateHandler interface {
	Handle(PostPersonnelPeoplePersonIDImpersonateParams) middleware.Responder
}

// NewPostPersonnelPeoplePersonIDImpersonate creates a new http.Handler for the post personnel people person ID impersonate operation
func NewPostPersonnelPeoplePersonIDImpersonate(ctx *middleware.Context, handler PostPersonnelPeoplePersonIDImpersonateHandler) *PostPersonnelPeoplePersonIDImpersonate {
	return &PostPersonnelPeoplePersonIDImpersonate{Context: ctx, Handler: handler}
}

/*
	PostPersonnelPeoplePersonIDImpersonate swagger:route POST /personnel/people/{personId}/impersonate personnel postPersonnelPeoplePersonIdImpersonate

Impersonate a person, useful for testing and reproducing bugs
*/
type PostPersonnelPeoplePersonIDImpersonate struct {
	Context *middleware.Context
	Handler PostPersonnelPeoplePersonIDImpersonateHandler
}

func (o *PostPersonnelPeoplePersonIDImpersonate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostPersonnelPeoplePersonIDImpersonateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
