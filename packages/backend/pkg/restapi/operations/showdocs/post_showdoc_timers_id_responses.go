// Code generated by go-swagger; DO NOT EDIT.

package showdocs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"showplanner.io/pkg/restapi/dtos"
)

// PostShowdocTimersIDOKCode is the HTTP code returned for type PostShowdocTimersIDOK
const PostShowdocTimersIDOKCode int = 200

/*
PostShowdocTimersIDOK OK

swagger:response postShowdocTimersIdOK
*/
type PostShowdocTimersIDOK struct {

	/*
	  In: Body
	*/
	Payload *dtos.ShowTimerDTO `json:"body,omitempty"`
}

// NewPostShowdocTimersIDOK creates PostShowdocTimersIDOK with default headers values
func NewPostShowdocTimersIDOK() *PostShowdocTimersIDOK {

	return &PostShowdocTimersIDOK{}
}

// WithPayload adds the payload to the post showdoc timers Id o k response
func (o *PostShowdocTimersIDOK) WithPayload(payload *dtos.ShowTimerDTO) *PostShowdocTimersIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post showdoc timers Id o k response
func (o *PostShowdocTimersIDOK) SetPayload(payload *dtos.ShowTimerDTO) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowdocTimersIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostShowdocTimersIDUnauthorizedCode is the HTTP code returned for type PostShowdocTimersIDUnauthorized
const PostShowdocTimersIDUnauthorizedCode int = 401

/*
PostShowdocTimersIDUnauthorized Error

swagger:response postShowdocTimersIdUnauthorized
*/
type PostShowdocTimersIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewPostShowdocTimersIDUnauthorized creates PostShowdocTimersIDUnauthorized with default headers values
func NewPostShowdocTimersIDUnauthorized() *PostShowdocTimersIDUnauthorized {

	return &PostShowdocTimersIDUnauthorized{}
}

// WithPayload adds the payload to the post showdoc timers Id unauthorized response
func (o *PostShowdocTimersIDUnauthorized) WithPayload(payload *dtos.Error) *PostShowdocTimersIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post showdoc timers Id unauthorized response
func (o *PostShowdocTimersIDUnauthorized) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowdocTimersIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostShowdocTimersIDInternalServerErrorCode is the HTTP code returned for type PostShowdocTimersIDInternalServerError
const PostShowdocTimersIDInternalServerErrorCode int = 500

/*
PostShowdocTimersIDInternalServerError Error

swagger:response postShowdocTimersIdInternalServerError
*/
type PostShowdocTimersIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewPostShowdocTimersIDInternalServerError creates PostShowdocTimersIDInternalServerError with default headers values
func NewPostShowdocTimersIDInternalServerError() *PostShowdocTimersIDInternalServerError {

	return &PostShowdocTimersIDInternalServerError{}
}

// WithPayload adds the payload to the post showdoc timers Id internal server error response
func (o *PostShowdocTimersIDInternalServerError) WithPayload(payload *dtos.Error) *PostShowdocTimersIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post showdoc timers Id internal server error response
func (o *PostShowdocTimersIDInternalServerError) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowdocTimersIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
