// Code generated by go-swagger; DO NOT EDIT.

package showdocs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostShowdocReportsIDHandlerFunc turns a function with the right signature into a post showdoc reports ID handler
type PostShowdocReportsIDHandlerFunc func(PostShowdocReportsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostShowdocReportsIDHandlerFunc) Handle(params PostShowdocReportsIDParams) middleware.Responder {
	return fn(params)
}

// PostShowdocReportsIDHandler interface for that can handle valid post showdoc reports ID params
type PostShowdocReportsIDHandler interface {
	Handle(PostShowdocReportsIDParams) middleware.Responder
}

// NewPostShowdocReportsID creates a new http.Handler for the post showdoc reports ID operation
func NewPostShowdocReportsID(ctx *middleware.Context, handler PostShowdocReportsIDHandler) *PostShowdocReportsID {
	return &PostShowdocReportsID{Context: ctx, Handler: handler}
}

/*
	PostShowdocReportsID swagger:route POST /showdoc/reports/{id} showdocs postShowdocReportsId

Updates a show report
*/
type PostShowdocReportsID struct {
	Context *middleware.Context
	Handler PostShowdocReportsIDHandler
}

func (o *PostShowdocReportsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostShowdocReportsIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
