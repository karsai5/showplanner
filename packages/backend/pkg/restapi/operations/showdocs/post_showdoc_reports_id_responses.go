// Code generated by go-swagger; DO NOT EDIT.

package showdocs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"showplanner.io/pkg/restapi/dtos"
)

// PostShowdocReportsIDOKCode is the HTTP code returned for type PostShowdocReportsIDOK
const PostShowdocReportsIDOKCode int = 200

/*
PostShowdocReportsIDOK OK

swagger:response postShowdocReportsIdOK
*/
type PostShowdocReportsIDOK struct {

	/*
	  In: Body
	*/
	Payload *dtos.ShowReportDTO `json:"body,omitempty"`
}

// NewPostShowdocReportsIDOK creates PostShowdocReportsIDOK with default headers values
func NewPostShowdocReportsIDOK() *PostShowdocReportsIDOK {

	return &PostShowdocReportsIDOK{}
}

// WithPayload adds the payload to the post showdoc reports Id o k response
func (o *PostShowdocReportsIDOK) WithPayload(payload *dtos.ShowReportDTO) *PostShowdocReportsIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post showdoc reports Id o k response
func (o *PostShowdocReportsIDOK) SetPayload(payload *dtos.ShowReportDTO) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowdocReportsIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostShowdocReportsIDUnauthorizedCode is the HTTP code returned for type PostShowdocReportsIDUnauthorized
const PostShowdocReportsIDUnauthorizedCode int = 401

/*
PostShowdocReportsIDUnauthorized Error

swagger:response postShowdocReportsIdUnauthorized
*/
type PostShowdocReportsIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewPostShowdocReportsIDUnauthorized creates PostShowdocReportsIDUnauthorized with default headers values
func NewPostShowdocReportsIDUnauthorized() *PostShowdocReportsIDUnauthorized {

	return &PostShowdocReportsIDUnauthorized{}
}

// WithPayload adds the payload to the post showdoc reports Id unauthorized response
func (o *PostShowdocReportsIDUnauthorized) WithPayload(payload *dtos.Error) *PostShowdocReportsIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post showdoc reports Id unauthorized response
func (o *PostShowdocReportsIDUnauthorized) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowdocReportsIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostShowdocReportsIDInternalServerErrorCode is the HTTP code returned for type PostShowdocReportsIDInternalServerError
const PostShowdocReportsIDInternalServerErrorCode int = 500

/*
PostShowdocReportsIDInternalServerError Error

swagger:response postShowdocReportsIdInternalServerError
*/
type PostShowdocReportsIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewPostShowdocReportsIDInternalServerError creates PostShowdocReportsIDInternalServerError with default headers values
func NewPostShowdocReportsIDInternalServerError() *PostShowdocReportsIDInternalServerError {

	return &PostShowdocReportsIDInternalServerError{}
}

// WithPayload adds the payload to the post showdoc reports Id internal server error response
func (o *PostShowdocReportsIDInternalServerError) WithPayload(payload *dtos.Error) *PostShowdocReportsIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post showdoc reports Id internal server error response
func (o *PostShowdocReportsIDInternalServerError) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowdocReportsIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
