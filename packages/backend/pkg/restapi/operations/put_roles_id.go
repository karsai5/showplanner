// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutRolesIDHandlerFunc turns a function with the right signature into a put roles ID handler
type PutRolesIDHandlerFunc func(PutRolesIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutRolesIDHandlerFunc) Handle(params PutRolesIDParams) middleware.Responder {
	return fn(params)
}

// PutRolesIDHandler interface for that can handle valid put roles ID params
type PutRolesIDHandler interface {
	Handle(PutRolesIDParams) middleware.Responder
}

// NewPutRolesID creates a new http.Handler for the put roles ID operation
func NewPutRolesID(ctx *middleware.Context, handler PutRolesIDHandler) *PutRolesID {
	return &PutRolesID{Context: ctx, Handler: handler}
}

/*
	PutRolesID swagger:route PUT /roles/{id} putRolesId

Updates a role
*/
type PutRolesID struct {
	Context *middleware.Context
	Handler PutRolesIDHandler
}

func (o *PutRolesID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutRolesIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
