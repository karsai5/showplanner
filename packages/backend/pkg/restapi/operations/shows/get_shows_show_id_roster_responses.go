// Code generated by go-swagger; DO NOT EDIT.

package shows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"showplanner.io/pkg/restapi/dtos"
)

// GetShowsShowIDRosterOKCode is the HTTP code returned for type GetShowsShowIDRosterOK
const GetShowsShowIDRosterOKCode int = 200

/*
GetShowsShowIDRosterOK OK

swagger:response getShowsShowIdRosterOK
*/
type GetShowsShowIDRosterOK struct {

	/*
	  In: Body
	*/
	Payload *dtos.RosterDTO `json:"body,omitempty"`
}

// NewGetShowsShowIDRosterOK creates GetShowsShowIDRosterOK with default headers values
func NewGetShowsShowIDRosterOK() *GetShowsShowIDRosterOK {

	return &GetShowsShowIDRosterOK{}
}

// WithPayload adds the payload to the get shows show Id roster o k response
func (o *GetShowsShowIDRosterOK) WithPayload(payload *dtos.RosterDTO) *GetShowsShowIDRosterOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shows show Id roster o k response
func (o *GetShowsShowIDRosterOK) SetPayload(payload *dtos.RosterDTO) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShowsShowIDRosterOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetShowsShowIDRosterUnauthorizedCode is the HTTP code returned for type GetShowsShowIDRosterUnauthorized
const GetShowsShowIDRosterUnauthorizedCode int = 401

/*
GetShowsShowIDRosterUnauthorized Error

swagger:response getShowsShowIdRosterUnauthorized
*/
type GetShowsShowIDRosterUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewGetShowsShowIDRosterUnauthorized creates GetShowsShowIDRosterUnauthorized with default headers values
func NewGetShowsShowIDRosterUnauthorized() *GetShowsShowIDRosterUnauthorized {

	return &GetShowsShowIDRosterUnauthorized{}
}

// WithPayload adds the payload to the get shows show Id roster unauthorized response
func (o *GetShowsShowIDRosterUnauthorized) WithPayload(payload *dtos.Error) *GetShowsShowIDRosterUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shows show Id roster unauthorized response
func (o *GetShowsShowIDRosterUnauthorized) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShowsShowIDRosterUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetShowsShowIDRosterInternalServerErrorCode is the HTTP code returned for type GetShowsShowIDRosterInternalServerError
const GetShowsShowIDRosterInternalServerErrorCode int = 500

/*
GetShowsShowIDRosterInternalServerError Error

swagger:response getShowsShowIdRosterInternalServerError
*/
type GetShowsShowIDRosterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewGetShowsShowIDRosterInternalServerError creates GetShowsShowIDRosterInternalServerError with default headers values
func NewGetShowsShowIDRosterInternalServerError() *GetShowsShowIDRosterInternalServerError {

	return &GetShowsShowIDRosterInternalServerError{}
}

// WithPayload adds the payload to the get shows show Id roster internal server error response
func (o *GetShowsShowIDRosterInternalServerError) WithPayload(payload *dtos.Error) *GetShowsShowIDRosterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shows show Id roster internal server error response
func (o *GetShowsShowIDRosterInternalServerError) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShowsShowIDRosterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
