// Code generated by go-swagger; DO NOT EDIT.

package shows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetShowsShowIDPeopleCsvGoogleHandlerFunc turns a function with the right signature into a get shows show ID people csv google handler
type GetShowsShowIDPeopleCsvGoogleHandlerFunc func(GetShowsShowIDPeopleCsvGoogleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetShowsShowIDPeopleCsvGoogleHandlerFunc) Handle(params GetShowsShowIDPeopleCsvGoogleParams) middleware.Responder {
	return fn(params)
}

// GetShowsShowIDPeopleCsvGoogleHandler interface for that can handle valid get shows show ID people csv google params
type GetShowsShowIDPeopleCsvGoogleHandler interface {
	Handle(GetShowsShowIDPeopleCsvGoogleParams) middleware.Responder
}

// NewGetShowsShowIDPeopleCsvGoogle creates a new http.Handler for the get shows show ID people csv google operation
func NewGetShowsShowIDPeopleCsvGoogle(ctx *middleware.Context, handler GetShowsShowIDPeopleCsvGoogleHandler) *GetShowsShowIDPeopleCsvGoogle {
	return &GetShowsShowIDPeopleCsvGoogle{Context: ctx, Handler: handler}
}

/*
	GetShowsShowIDPeopleCsvGoogle swagger:route GET /shows/{showId}/people/csv-google shows getShowsShowIdPeopleCsvGoogle

Returns a CSV file of people for a show compatible with google
*/
type GetShowsShowIDPeopleCsvGoogle struct {
	Context *middleware.Context
	Handler GetShowsShowIDPeopleCsvGoogleHandler
}

func (o *GetShowsShowIDPeopleCsvGoogle) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetShowsShowIDPeopleCsvGoogleParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
