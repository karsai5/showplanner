// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostRosterAssignHandlerFunc turns a function with the right signature into a post roster assign handler
type PostRosterAssignHandlerFunc func(PostRosterAssignParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostRosterAssignHandlerFunc) Handle(params PostRosterAssignParams) middleware.Responder {
	return fn(params)
}

// PostRosterAssignHandler interface for that can handle valid post roster assign params
type PostRosterAssignHandler interface {
	Handle(PostRosterAssignParams) middleware.Responder
}

// NewPostRosterAssign creates a new http.Handler for the post roster assign operation
func NewPostRosterAssign(ctx *middleware.Context, handler PostRosterAssignHandler) *PostRosterAssign {
	return &PostRosterAssign{Context: ctx, Handler: handler}
}

/*
	PostRosterAssign swagger:route POST /roster/assign postRosterAssign

Assign a person to a role for an event
*/
type PostRosterAssign struct {
	Context *middleware.Context
	Handler PostRosterAssignHandler
}

func (o *PostRosterAssign) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostRosterAssignParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
