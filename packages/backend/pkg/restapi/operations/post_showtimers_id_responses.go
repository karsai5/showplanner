// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"showplanner.io/pkg/restapi/dtos"
)

// PostShowtimersIDOKCode is the HTTP code returned for type PostShowtimersIDOK
const PostShowtimersIDOKCode int = 200

/*
PostShowtimersIDOK OK

swagger:response postShowtimersIdOK
*/
type PostShowtimersIDOK struct {

	/*
	  In: Body
	*/
	Payload *dtos.ShowTimerDTO `json:"body,omitempty"`
}

// NewPostShowtimersIDOK creates PostShowtimersIDOK with default headers values
func NewPostShowtimersIDOK() *PostShowtimersIDOK {

	return &PostShowtimersIDOK{}
}

// WithPayload adds the payload to the post showtimers Id o k response
func (o *PostShowtimersIDOK) WithPayload(payload *dtos.ShowTimerDTO) *PostShowtimersIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post showtimers Id o k response
func (o *PostShowtimersIDOK) SetPayload(payload *dtos.ShowTimerDTO) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowtimersIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostShowtimersIDUnauthorizedCode is the HTTP code returned for type PostShowtimersIDUnauthorized
const PostShowtimersIDUnauthorizedCode int = 401

/*
PostShowtimersIDUnauthorized Error

swagger:response postShowtimersIdUnauthorized
*/
type PostShowtimersIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewPostShowtimersIDUnauthorized creates PostShowtimersIDUnauthorized with default headers values
func NewPostShowtimersIDUnauthorized() *PostShowtimersIDUnauthorized {

	return &PostShowtimersIDUnauthorized{}
}

// WithPayload adds the payload to the post showtimers Id unauthorized response
func (o *PostShowtimersIDUnauthorized) WithPayload(payload *dtos.Error) *PostShowtimersIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post showtimers Id unauthorized response
func (o *PostShowtimersIDUnauthorized) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowtimersIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostShowtimersIDInternalServerErrorCode is the HTTP code returned for type PostShowtimersIDInternalServerError
const PostShowtimersIDInternalServerErrorCode int = 500

/*
PostShowtimersIDInternalServerError Error

swagger:response postShowtimersIdInternalServerError
*/
type PostShowtimersIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewPostShowtimersIDInternalServerError creates PostShowtimersIDInternalServerError with default headers values
func NewPostShowtimersIDInternalServerError() *PostShowtimersIDInternalServerError {

	return &PostShowtimersIDInternalServerError{}
}

// WithPayload adds the payload to the post showtimers Id internal server error response
func (o *PostShowtimersIDInternalServerError) WithPayload(payload *dtos.Error) *PostShowtimersIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post showtimers Id internal server error response
func (o *PostShowtimersIDInternalServerError) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowtimersIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
