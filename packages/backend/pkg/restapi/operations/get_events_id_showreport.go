// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetEventsIDShowreportHandlerFunc turns a function with the right signature into a get events ID showreport handler
type GetEventsIDShowreportHandlerFunc func(GetEventsIDShowreportParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEventsIDShowreportHandlerFunc) Handle(params GetEventsIDShowreportParams) middleware.Responder {
	return fn(params)
}

// GetEventsIDShowreportHandler interface for that can handle valid get events ID showreport params
type GetEventsIDShowreportHandler interface {
	Handle(GetEventsIDShowreportParams) middleware.Responder
}

// NewGetEventsIDShowreport creates a new http.Handler for the get events ID showreport operation
func NewGetEventsIDShowreport(ctx *middleware.Context, handler GetEventsIDShowreportHandler) *GetEventsIDShowreport {
	return &GetEventsIDShowreport{Context: ctx, Handler: handler}
}

/*
	GetEventsIDShowreport swagger:route GET /events/{id}/showreport getEventsIdShowreport

Return show report and info about show report
*/
type GetEventsIDShowreport struct {
	Context *middleware.Context
	Handler GetEventsIDShowreportHandler
}

func (o *GetEventsIDShowreport) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetEventsIDShowreportParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
