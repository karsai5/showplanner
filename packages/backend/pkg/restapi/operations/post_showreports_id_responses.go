// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"showplanner.io/pkg/models"
)

// PostShowreportsIDOKCode is the HTTP code returned for type PostShowreportsIDOK
const PostShowreportsIDOKCode int = 200

/*
PostShowreportsIDOK OK

swagger:response postShowreportsIdOK
*/
type PostShowreportsIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.ShowReportDTO `json:"body,omitempty"`
}

// NewPostShowreportsIDOK creates PostShowreportsIDOK with default headers values
func NewPostShowreportsIDOK() *PostShowreportsIDOK {

	return &PostShowreportsIDOK{}
}

// WithPayload adds the payload to the post showreports Id o k response
func (o *PostShowreportsIDOK) WithPayload(payload *models.ShowReportDTO) *PostShowreportsIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post showreports Id o k response
func (o *PostShowreportsIDOK) SetPayload(payload *models.ShowReportDTO) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowreportsIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostShowreportsIDUnauthorizedCode is the HTTP code returned for type PostShowreportsIDUnauthorized
const PostShowreportsIDUnauthorizedCode int = 401

/*
PostShowreportsIDUnauthorized Error

swagger:response postShowreportsIdUnauthorized
*/
type PostShowreportsIDUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostShowreportsIDUnauthorized creates PostShowreportsIDUnauthorized with default headers values
func NewPostShowreportsIDUnauthorized() *PostShowreportsIDUnauthorized {

	return &PostShowreportsIDUnauthorized{}
}

// WithPayload adds the payload to the post showreports Id unauthorized response
func (o *PostShowreportsIDUnauthorized) WithPayload(payload *models.Error) *PostShowreportsIDUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post showreports Id unauthorized response
func (o *PostShowreportsIDUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowreportsIDUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostShowreportsIDInternalServerErrorCode is the HTTP code returned for type PostShowreportsIDInternalServerError
const PostShowreportsIDInternalServerErrorCode int = 500

/*
PostShowreportsIDInternalServerError Error

swagger:response postShowreportsIdInternalServerError
*/
type PostShowreportsIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostShowreportsIDInternalServerError creates PostShowreportsIDInternalServerError with default headers values
func NewPostShowreportsIDInternalServerError() *PostShowreportsIDInternalServerError {

	return &PostShowreportsIDInternalServerError{}
}

// WithPayload adds the payload to the post showreports Id internal server error response
func (o *PostShowreportsIDInternalServerError) WithPayload(payload *models.Error) *PostShowreportsIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post showreports Id internal server error response
func (o *PostShowreportsIDInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowreportsIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
