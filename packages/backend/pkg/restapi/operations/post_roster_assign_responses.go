// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"showplanner.io/pkg/models"
)

// PostRosterAssignOKCode is the HTTP code returned for type PostRosterAssignOK
const PostRosterAssignOKCode int = 200

/*
PostRosterAssignOK OK

swagger:response postRosterAssignOK
*/
type PostRosterAssignOK struct {

	/*
	  In: Body
	*/
	Payload *models.AssignedDTO `json:"body,omitempty"`
}

// NewPostRosterAssignOK creates PostRosterAssignOK with default headers values
func NewPostRosterAssignOK() *PostRosterAssignOK {

	return &PostRosterAssignOK{}
}

// WithPayload adds the payload to the post roster assign o k response
func (o *PostRosterAssignOK) WithPayload(payload *models.AssignedDTO) *PostRosterAssignOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post roster assign o k response
func (o *PostRosterAssignOK) SetPayload(payload *models.AssignedDTO) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRosterAssignOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRosterAssignUnauthorizedCode is the HTTP code returned for type PostRosterAssignUnauthorized
const PostRosterAssignUnauthorizedCode int = 401

/*
PostRosterAssignUnauthorized Error

swagger:response postRosterAssignUnauthorized
*/
type PostRosterAssignUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostRosterAssignUnauthorized creates PostRosterAssignUnauthorized with default headers values
func NewPostRosterAssignUnauthorized() *PostRosterAssignUnauthorized {

	return &PostRosterAssignUnauthorized{}
}

// WithPayload adds the payload to the post roster assign unauthorized response
func (o *PostRosterAssignUnauthorized) WithPayload(payload *models.Error) *PostRosterAssignUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post roster assign unauthorized response
func (o *PostRosterAssignUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRosterAssignUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRosterAssignInternalServerErrorCode is the HTTP code returned for type PostRosterAssignInternalServerError
const PostRosterAssignInternalServerErrorCode int = 500

/*
PostRosterAssignInternalServerError Error

swagger:response postRosterAssignInternalServerError
*/
type PostRosterAssignInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostRosterAssignInternalServerError creates PostRosterAssignInternalServerError with default headers values
func NewPostRosterAssignInternalServerError() *PostRosterAssignInternalServerError {

	return &PostRosterAssignInternalServerError{}
}

// WithPayload adds the payload to the post roster assign internal server error response
func (o *PostRosterAssignInternalServerError) WithPayload(payload *models.Error) *PostRosterAssignInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post roster assign internal server error response
func (o *PostRosterAssignInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRosterAssignInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
