// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	"showplanner.io/pkg/models"
)

// GetShowreportIDPdfOKCode is the HTTP code returned for type GetShowreportIDPdfOK
const GetShowreportIDPdfOKCode int = 200

/*
GetShowreportIDPdfOK A PDF file

swagger:response getShowreportIdPdfOK
*/
type GetShowreportIDPdfOK struct {

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewGetShowreportIDPdfOK creates GetShowreportIDPdfOK with default headers values
func NewGetShowreportIDPdfOK() *GetShowreportIDPdfOK {

	return &GetShowreportIDPdfOK{}
}

// WithPayload adds the payload to the get showreport Id pdf o k response
func (o *GetShowreportIDPdfOK) WithPayload(payload io.ReadCloser) *GetShowreportIDPdfOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get showreport Id pdf o k response
func (o *GetShowreportIDPdfOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShowreportIDPdfOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetShowreportIDPdfUnauthorizedCode is the HTTP code returned for type GetShowreportIDPdfUnauthorized
const GetShowreportIDPdfUnauthorizedCode int = 401

/*
GetShowreportIDPdfUnauthorized Error

swagger:response getShowreportIdPdfUnauthorized
*/
type GetShowreportIDPdfUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetShowreportIDPdfUnauthorized creates GetShowreportIDPdfUnauthorized with default headers values
func NewGetShowreportIDPdfUnauthorized() *GetShowreportIDPdfUnauthorized {

	return &GetShowreportIDPdfUnauthorized{}
}

// WithPayload adds the payload to the get showreport Id pdf unauthorized response
func (o *GetShowreportIDPdfUnauthorized) WithPayload(payload *models.Error) *GetShowreportIDPdfUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get showreport Id pdf unauthorized response
func (o *GetShowreportIDPdfUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShowreportIDPdfUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetShowreportIDPdfInternalServerErrorCode is the HTTP code returned for type GetShowreportIDPdfInternalServerError
const GetShowreportIDPdfInternalServerErrorCode int = 500

/*
GetShowreportIDPdfInternalServerError Error

swagger:response getShowreportIdPdfInternalServerError
*/
type GetShowreportIDPdfInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetShowreportIDPdfInternalServerError creates GetShowreportIDPdfInternalServerError with default headers values
func NewGetShowreportIDPdfInternalServerError() *GetShowreportIDPdfInternalServerError {

	return &GetShowreportIDPdfInternalServerError{}
}

// WithPayload adds the payload to the get showreport Id pdf internal server error response
func (o *GetShowreportIDPdfInternalServerError) WithPayload(payload *models.Error) *GetShowreportIDPdfInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get showreport Id pdf internal server error response
func (o *GetShowreportIDPdfInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetShowreportIDPdfInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
