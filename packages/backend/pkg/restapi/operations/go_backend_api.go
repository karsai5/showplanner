// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"showplanner.io/pkg/restapi/operations/personnel"
	"showplanner.io/pkg/restapi/operations/rostering"
	"showplanner.io/pkg/restapi/operations/showdocs"
	"showplanner.io/pkg/restapi/operations/shows"
)

// NewGoBackendAPI creates a new GoBackend instance
func NewGoBackendAPI(spec *loads.Document) *GoBackendAPI {
	return &GoBackendAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,

		BinProducer:  runtime.ByteStreamProducer(),
		JSONProducer: runtime.JSONProducer(),
		TextCalendarProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("textCalendar producer has not yet been implemented")
		}),

		DeleteAssignmentIDHandler: DeleteAssignmentIDHandlerFunc(func(params DeleteAssignmentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteAssignmentID has not yet been implemented")
		}),
		DeleteEventsIDHandler: DeleteEventsIDHandlerFunc(func(params DeleteEventsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteEventsID has not yet been implemented")
		}),
		RosteringDeleteInvitationsIDHandler: rostering.DeleteInvitationsIDHandlerFunc(func(params rostering.DeleteInvitationsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.DeleteInvitationsID has not yet been implemented")
		}),
		DeleteRolesIDHandler: DeleteRolesIDHandlerFunc(func(params DeleteRolesIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteRolesID has not yet been implemented")
		}),
		DeleteShadowIDHandler: DeleteShadowIDHandlerFunc(func(params DeleteShadowIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteShadowID has not yet been implemented")
		}),
		GetAvailabilitiesHandler: GetAvailabilitiesHandlerFunc(func(params GetAvailabilitiesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetAvailabilities has not yet been implemented")
		}),
		GetEventsIDHandler: GetEventsIDHandlerFunc(func(params GetEventsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetEventsID has not yet been implemented")
		}),
		RosteringGetInvitationsHandler: rostering.GetInvitationsHandlerFunc(func(params rostering.GetInvitationsParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.GetInvitations has not yet been implemented")
		}),
		RosteringGetInvitationsIDHandler: rostering.GetInvitationsIDHandlerFunc(func(params rostering.GetInvitationsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.GetInvitationsID has not yet been implemented")
		}),
		PersonnelGetMeHandler: personnel.GetMeHandlerFunc(func(params personnel.GetMeParams) middleware.Responder {
			return middleware.NotImplemented("operation personnel.GetMe has not yet been implemented")
		}),
		GetPersonnelAssignedHandler: GetPersonnelAssignedHandlerFunc(func(params GetPersonnelAssignedParams) middleware.Responder {
			return middleware.NotImplemented("operation GetPersonnelAssigned has not yet been implemented")
		}),
		GetPersonnelAssignedGoogleContactsCSVHandler: GetPersonnelAssignedGoogleContactsCSVHandlerFunc(func(params GetPersonnelAssignedGoogleContactsCSVParams) middleware.Responder {
			return middleware.NotImplemented("operation GetPersonnelAssignedGoogleContactsCSV has not yet been implemented")
		}),
		PersonnelGetPersonnelPeopleHandler: personnel.GetPersonnelPeopleHandlerFunc(func(params personnel.GetPersonnelPeopleParams) middleware.Responder {
			return middleware.NotImplemented("operation personnel.GetPersonnelPeople has not yet been implemented")
		}),
		PersonnelGetPersonnelPeoplePersonIDHandler: personnel.GetPersonnelPeoplePersonIDHandlerFunc(func(params personnel.GetPersonnelPeoplePersonIDParams) middleware.Responder {
			return middleware.NotImplemented("operation personnel.GetPersonnelPeoplePersonID has not yet been implemented")
		}),
		PersonnelGetPersonnelSearchHandler: personnel.GetPersonnelSearchHandlerFunc(func(params personnel.GetPersonnelSearchParams) middleware.Responder {
			return middleware.NotImplemented("operation personnel.GetPersonnelSearch has not yet been implemented")
		}),
		GetPublicCalendarIDHandler: GetPublicCalendarIDHandlerFunc(func(params GetPublicCalendarIDParams) middleware.Responder {
			return middleware.NotImplemented("operation GetPublicCalendarID has not yet been implemented")
		}),
		GetPublicHealthHandler: GetPublicHealthHandlerFunc(func(params GetPublicHealthParams) middleware.Responder {
			return middleware.NotImplemented("operation GetPublicHealth has not yet been implemented")
		}),
		GetPublicScheduleHandler: GetPublicScheduleHandlerFunc(func(params GetPublicScheduleParams) middleware.Responder {
			return middleware.NotImplemented("operation GetPublicSchedule has not yet been implemented")
		}),
		GetRolesHandler: GetRolesHandlerFunc(func(params GetRolesParams) middleware.Responder {
			return middleware.NotImplemented("operation GetRoles has not yet been implemented")
		}),
		RosteringGetRosteringShowsHandler: rostering.GetRosteringShowsHandlerFunc(func(params rostering.GetRosteringShowsParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.GetRosteringShows has not yet been implemented")
		}),
		GetScheduleHandler: GetScheduleHandlerFunc(func(params GetScheduleParams) middleware.Responder {
			return middleware.NotImplemented("operation GetSchedule has not yet been implemented")
		}),
		ShowdocsGetShowdocReportsHandler: showdocs.GetShowdocReportsHandlerFunc(func(params showdocs.GetShowdocReportsParams) middleware.Responder {
			return middleware.NotImplemented("operation showdocs.GetShowdocReports has not yet been implemented")
		}),
		ShowdocsGetShowdocReportsIDHandler: showdocs.GetShowdocReportsIDHandlerFunc(func(params showdocs.GetShowdocReportsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation showdocs.GetShowdocReportsID has not yet been implemented")
		}),
		ShowdocsGetShowdocReportsIDPdfHandler: showdocs.GetShowdocReportsIDPdfHandlerFunc(func(params showdocs.GetShowdocReportsIDPdfParams) middleware.Responder {
			return middleware.NotImplemented("operation showdocs.GetShowdocReportsIDPdf has not yet been implemented")
		}),
		ShowdocsGetShowdocReportsIDTexHandler: showdocs.GetShowdocReportsIDTexHandlerFunc(func(params showdocs.GetShowdocReportsIDTexParams) middleware.Responder {
			return middleware.NotImplemented("operation showdocs.GetShowdocReportsIDTex has not yet been implemented")
		}),
		ShowdocsGetShowdocTimersHandler: showdocs.GetShowdocTimersHandlerFunc(func(params showdocs.GetShowdocTimersParams) middleware.Responder {
			return middleware.NotImplemented("operation showdocs.GetShowdocTimers has not yet been implemented")
		}),
		ShowdocsGetShowdocTimersIDHandler: showdocs.GetShowdocTimersIDHandlerFunc(func(params showdocs.GetShowdocTimersIDParams) middleware.Responder {
			return middleware.NotImplemented("operation showdocs.GetShowdocTimersID has not yet been implemented")
		}),
		RosteringGetShowsShowIDInvitationsHandler: rostering.GetShowsShowIDInvitationsHandlerFunc(func(params rostering.GetShowsShowIDInvitationsParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.GetShowsShowIDInvitations has not yet been implemented")
		}),
		ShowsGetShowsShowIDRosterHandler: shows.GetShowsShowIDRosterHandlerFunc(func(params shows.GetShowsShowIDRosterParams) middleware.Responder {
			return middleware.NotImplemented("operation shows.GetShowsShowIDRoster has not yet been implemented")
		}),
		RosteringGetShowsShowSlugSummaryHandler: rostering.GetShowsShowSlugSummaryHandlerFunc(func(params rostering.GetShowsShowSlugSummaryParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.GetShowsShowSlugSummary has not yet been implemented")
		}),
		PostAssignmentHandler: PostAssignmentHandlerFunc(func(params PostAssignmentParams) middleware.Responder {
			return middleware.NotImplemented("operation PostAssignment has not yet been implemented")
		}),
		PostAvailabilitiesHandler: PostAvailabilitiesHandlerFunc(func(params PostAvailabilitiesParams) middleware.Responder {
			return middleware.NotImplemented("operation PostAvailabilities has not yet been implemented")
		}),
		PostEventsHandler: PostEventsHandlerFunc(func(params PostEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation PostEvents has not yet been implemented")
		}),
		PostEventsIDHandler: PostEventsIDHandlerFunc(func(params PostEventsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PostEventsID has not yet been implemented")
		}),
		RosteringPostInvitationsHandler: rostering.PostInvitationsHandlerFunc(func(params rostering.PostInvitationsParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.PostInvitations has not yet been implemented")
		}),
		RosteringPostInvitationsIDAcceptHandler: rostering.PostInvitationsIDAcceptHandlerFunc(func(params rostering.PostInvitationsIDAcceptParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.PostInvitationsIDAccept has not yet been implemented")
		}),
		RosteringPostInvitationsIDNotifyHandler: rostering.PostInvitationsIDNotifyHandlerFunc(func(params rostering.PostInvitationsIDNotifyParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.PostInvitationsIDNotify has not yet been implemented")
		}),
		PersonnelPostMeHandler: personnel.PostMeHandlerFunc(func(params personnel.PostMeParams) middleware.Responder {
			return middleware.NotImplemented("operation personnel.PostMe has not yet been implemented")
		}),
		PostMediaUploadHandler: PostMediaUploadHandlerFunc(func(params PostMediaUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation PostMediaUpload has not yet been implemented")
		}),
		PersonnelPostPersonnelPeoplePersonIDImpersonateHandler: personnel.PostPersonnelPeoplePersonIDImpersonateHandlerFunc(func(params personnel.PostPersonnelPeoplePersonIDImpersonateParams) middleware.Responder {
			return middleware.NotImplemented("operation personnel.PostPersonnelPeoplePersonIDImpersonate has not yet been implemented")
		}),
		PostRolesHandler: PostRolesHandlerFunc(func(params PostRolesParams) middleware.Responder {
			return middleware.NotImplemented("operation PostRoles has not yet been implemented")
		}),
		RosteringPostRosteringShowsHandler: rostering.PostRosteringShowsHandlerFunc(func(params rostering.PostRosteringShowsParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.PostRosteringShows has not yet been implemented")
		}),
		PostShadowHandler: PostShadowHandlerFunc(func(params PostShadowParams) middleware.Responder {
			return middleware.NotImplemented("operation PostShadow has not yet been implemented")
		}),
		ShowdocsPostShowdocReportsIDHandler: showdocs.PostShowdocReportsIDHandlerFunc(func(params showdocs.PostShowdocReportsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation showdocs.PostShowdocReportsID has not yet been implemented")
		}),
		ShowdocsPostShowdocTimersIDHandler: showdocs.PostShowdocTimersIDHandlerFunc(func(params showdocs.PostShowdocTimersIDParams) middleware.Responder {
			return middleware.NotImplemented("operation showdocs.PostShowdocTimersID has not yet been implemented")
		}),
		RosteringPostShowsShowIDPeopleUnassignHandler: rostering.PostShowsShowIDPeopleUnassignHandlerFunc(func(params rostering.PostShowsShowIDPeopleUnassignParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.PostShowsShowIDPeopleUnassign has not yet been implemented")
		}),
		RosteringPostShowsShowIDRolesSetorderHandler: rostering.PostShowsShowIDRolesSetorderHandlerFunc(func(params rostering.PostShowsShowIDRolesSetorderParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.PostShowsShowIDRolesSetorder has not yet been implemented")
		}),
		RosteringPostShowsShowIDRosterReleaseHandler: rostering.PostShowsShowIDRosterReleaseHandlerFunc(func(params rostering.PostShowsShowIDRosterReleaseParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.PostShowsShowIDRosterRelease has not yet been implemented")
		}),
		RosteringPostShowsShowIDRosterUnreleaseHandler: rostering.PostShowsShowIDRosterUnreleaseHandlerFunc(func(params rostering.PostShowsShowIDRosterUnreleaseParams) middleware.Responder {
			return middleware.NotImplemented("operation rostering.PostShowsShowIDRosterUnrelease has not yet been implemented")
		}),
		PutAssignmentIDHandler: PutAssignmentIDHandlerFunc(func(params PutAssignmentIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PutAssignmentID has not yet been implemented")
		}),
		PutRolesIDHandler: PutRolesIDHandlerFunc(func(params PutRolesIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PutRolesID has not yet been implemented")
		}),
	}
}

/*GoBackendAPI API description in Markdown. */
type GoBackendAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer

	// BinProducer registers a producer for the following mime types:
	//   - application/pdf
	BinProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer
	// TextCalendarProducer registers a producer for the following mime types:
	//   - text/calendar
	TextCalendarProducer runtime.Producer

	// DeleteAssignmentIDHandler sets the operation handler for the delete assignment ID operation
	DeleteAssignmentIDHandler DeleteAssignmentIDHandler
	// DeleteEventsIDHandler sets the operation handler for the delete events ID operation
	DeleteEventsIDHandler DeleteEventsIDHandler
	// RosteringDeleteInvitationsIDHandler sets the operation handler for the delete invitations ID operation
	RosteringDeleteInvitationsIDHandler rostering.DeleteInvitationsIDHandler
	// DeleteRolesIDHandler sets the operation handler for the delete roles ID operation
	DeleteRolesIDHandler DeleteRolesIDHandler
	// DeleteShadowIDHandler sets the operation handler for the delete shadow ID operation
	DeleteShadowIDHandler DeleteShadowIDHandler
	// GetAvailabilitiesHandler sets the operation handler for the get availabilities operation
	GetAvailabilitiesHandler GetAvailabilitiesHandler
	// GetEventsIDHandler sets the operation handler for the get events ID operation
	GetEventsIDHandler GetEventsIDHandler
	// RosteringGetInvitationsHandler sets the operation handler for the get invitations operation
	RosteringGetInvitationsHandler rostering.GetInvitationsHandler
	// RosteringGetInvitationsIDHandler sets the operation handler for the get invitations ID operation
	RosteringGetInvitationsIDHandler rostering.GetInvitationsIDHandler
	// PersonnelGetMeHandler sets the operation handler for the get me operation
	PersonnelGetMeHandler personnel.GetMeHandler
	// GetPersonnelAssignedHandler sets the operation handler for the get personnel assigned operation
	GetPersonnelAssignedHandler GetPersonnelAssignedHandler
	// GetPersonnelAssignedGoogleContactsCSVHandler sets the operation handler for the get personnel assigned google contacts c s v operation
	GetPersonnelAssignedGoogleContactsCSVHandler GetPersonnelAssignedGoogleContactsCSVHandler
	// PersonnelGetPersonnelPeopleHandler sets the operation handler for the get personnel people operation
	PersonnelGetPersonnelPeopleHandler personnel.GetPersonnelPeopleHandler
	// PersonnelGetPersonnelPeoplePersonIDHandler sets the operation handler for the get personnel people person ID operation
	PersonnelGetPersonnelPeoplePersonIDHandler personnel.GetPersonnelPeoplePersonIDHandler
	// PersonnelGetPersonnelSearchHandler sets the operation handler for the get personnel search operation
	PersonnelGetPersonnelSearchHandler personnel.GetPersonnelSearchHandler
	// GetPublicCalendarIDHandler sets the operation handler for the get public calendar ID operation
	GetPublicCalendarIDHandler GetPublicCalendarIDHandler
	// GetPublicHealthHandler sets the operation handler for the get public health operation
	GetPublicHealthHandler GetPublicHealthHandler
	// GetPublicScheduleHandler sets the operation handler for the get public schedule operation
	GetPublicScheduleHandler GetPublicScheduleHandler
	// GetRolesHandler sets the operation handler for the get roles operation
	GetRolesHandler GetRolesHandler
	// RosteringGetRosteringShowsHandler sets the operation handler for the get rostering shows operation
	RosteringGetRosteringShowsHandler rostering.GetRosteringShowsHandler
	// GetScheduleHandler sets the operation handler for the get schedule operation
	GetScheduleHandler GetScheduleHandler
	// ShowdocsGetShowdocReportsHandler sets the operation handler for the get showdoc reports operation
	ShowdocsGetShowdocReportsHandler showdocs.GetShowdocReportsHandler
	// ShowdocsGetShowdocReportsIDHandler sets the operation handler for the get showdoc reports ID operation
	ShowdocsGetShowdocReportsIDHandler showdocs.GetShowdocReportsIDHandler
	// ShowdocsGetShowdocReportsIDPdfHandler sets the operation handler for the get showdoc reports ID pdf operation
	ShowdocsGetShowdocReportsIDPdfHandler showdocs.GetShowdocReportsIDPdfHandler
	// ShowdocsGetShowdocReportsIDTexHandler sets the operation handler for the get showdoc reports ID tex operation
	ShowdocsGetShowdocReportsIDTexHandler showdocs.GetShowdocReportsIDTexHandler
	// ShowdocsGetShowdocTimersHandler sets the operation handler for the get showdoc timers operation
	ShowdocsGetShowdocTimersHandler showdocs.GetShowdocTimersHandler
	// ShowdocsGetShowdocTimersIDHandler sets the operation handler for the get showdoc timers ID operation
	ShowdocsGetShowdocTimersIDHandler showdocs.GetShowdocTimersIDHandler
	// RosteringGetShowsShowIDInvitationsHandler sets the operation handler for the get shows show ID invitations operation
	RosteringGetShowsShowIDInvitationsHandler rostering.GetShowsShowIDInvitationsHandler
	// ShowsGetShowsShowIDRosterHandler sets the operation handler for the get shows show ID roster operation
	ShowsGetShowsShowIDRosterHandler shows.GetShowsShowIDRosterHandler
	// RosteringGetShowsShowSlugSummaryHandler sets the operation handler for the get shows show slug summary operation
	RosteringGetShowsShowSlugSummaryHandler rostering.GetShowsShowSlugSummaryHandler
	// PostAssignmentHandler sets the operation handler for the post assignment operation
	PostAssignmentHandler PostAssignmentHandler
	// PostAvailabilitiesHandler sets the operation handler for the post availabilities operation
	PostAvailabilitiesHandler PostAvailabilitiesHandler
	// PostEventsHandler sets the operation handler for the post events operation
	PostEventsHandler PostEventsHandler
	// PostEventsIDHandler sets the operation handler for the post events ID operation
	PostEventsIDHandler PostEventsIDHandler
	// RosteringPostInvitationsHandler sets the operation handler for the post invitations operation
	RosteringPostInvitationsHandler rostering.PostInvitationsHandler
	// RosteringPostInvitationsIDAcceptHandler sets the operation handler for the post invitations ID accept operation
	RosteringPostInvitationsIDAcceptHandler rostering.PostInvitationsIDAcceptHandler
	// RosteringPostInvitationsIDNotifyHandler sets the operation handler for the post invitations ID notify operation
	RosteringPostInvitationsIDNotifyHandler rostering.PostInvitationsIDNotifyHandler
	// PersonnelPostMeHandler sets the operation handler for the post me operation
	PersonnelPostMeHandler personnel.PostMeHandler
	// PostMediaUploadHandler sets the operation handler for the post media upload operation
	PostMediaUploadHandler PostMediaUploadHandler
	// PersonnelPostPersonnelPeoplePersonIDImpersonateHandler sets the operation handler for the post personnel people person ID impersonate operation
	PersonnelPostPersonnelPeoplePersonIDImpersonateHandler personnel.PostPersonnelPeoplePersonIDImpersonateHandler
	// PostRolesHandler sets the operation handler for the post roles operation
	PostRolesHandler PostRolesHandler
	// RosteringPostRosteringShowsHandler sets the operation handler for the post rostering shows operation
	RosteringPostRosteringShowsHandler rostering.PostRosteringShowsHandler
	// PostShadowHandler sets the operation handler for the post shadow operation
	PostShadowHandler PostShadowHandler
	// ShowdocsPostShowdocReportsIDHandler sets the operation handler for the post showdoc reports ID operation
	ShowdocsPostShowdocReportsIDHandler showdocs.PostShowdocReportsIDHandler
	// ShowdocsPostShowdocTimersIDHandler sets the operation handler for the post showdoc timers ID operation
	ShowdocsPostShowdocTimersIDHandler showdocs.PostShowdocTimersIDHandler
	// RosteringPostShowsShowIDPeopleUnassignHandler sets the operation handler for the post shows show ID people unassign operation
	RosteringPostShowsShowIDPeopleUnassignHandler rostering.PostShowsShowIDPeopleUnassignHandler
	// RosteringPostShowsShowIDRolesSetorderHandler sets the operation handler for the post shows show ID roles setorder operation
	RosteringPostShowsShowIDRolesSetorderHandler rostering.PostShowsShowIDRolesSetorderHandler
	// RosteringPostShowsShowIDRosterReleaseHandler sets the operation handler for the post shows show ID roster release operation
	RosteringPostShowsShowIDRosterReleaseHandler rostering.PostShowsShowIDRosterReleaseHandler
	// RosteringPostShowsShowIDRosterUnreleaseHandler sets the operation handler for the post shows show ID roster unrelease operation
	RosteringPostShowsShowIDRosterUnreleaseHandler rostering.PostShowsShowIDRosterUnreleaseHandler
	// PutAssignmentIDHandler sets the operation handler for the put assignment ID operation
	PutAssignmentIDHandler PutAssignmentIDHandler
	// PutRolesIDHandler sets the operation handler for the put roles ID operation
	PutRolesIDHandler PutRolesIDHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *GoBackendAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *GoBackendAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *GoBackendAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *GoBackendAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *GoBackendAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *GoBackendAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *GoBackendAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *GoBackendAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *GoBackendAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the GoBackendAPI
func (o *GoBackendAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}
	if o.TextCalendarProducer == nil {
		unregistered = append(unregistered, "TextCalendarProducer")
	}

	if o.DeleteAssignmentIDHandler == nil {
		unregistered = append(unregistered, "DeleteAssignmentIDHandler")
	}
	if o.DeleteEventsIDHandler == nil {
		unregistered = append(unregistered, "DeleteEventsIDHandler")
	}
	if o.RosteringDeleteInvitationsIDHandler == nil {
		unregistered = append(unregistered, "rostering.DeleteInvitationsIDHandler")
	}
	if o.DeleteRolesIDHandler == nil {
		unregistered = append(unregistered, "DeleteRolesIDHandler")
	}
	if o.DeleteShadowIDHandler == nil {
		unregistered = append(unregistered, "DeleteShadowIDHandler")
	}
	if o.GetAvailabilitiesHandler == nil {
		unregistered = append(unregistered, "GetAvailabilitiesHandler")
	}
	if o.GetEventsIDHandler == nil {
		unregistered = append(unregistered, "GetEventsIDHandler")
	}
	if o.RosteringGetInvitationsHandler == nil {
		unregistered = append(unregistered, "rostering.GetInvitationsHandler")
	}
	if o.RosteringGetInvitationsIDHandler == nil {
		unregistered = append(unregistered, "rostering.GetInvitationsIDHandler")
	}
	if o.PersonnelGetMeHandler == nil {
		unregistered = append(unregistered, "personnel.GetMeHandler")
	}
	if o.GetPersonnelAssignedHandler == nil {
		unregistered = append(unregistered, "GetPersonnelAssignedHandler")
	}
	if o.GetPersonnelAssignedGoogleContactsCSVHandler == nil {
		unregistered = append(unregistered, "GetPersonnelAssignedGoogleContactsCSVHandler")
	}
	if o.PersonnelGetPersonnelPeopleHandler == nil {
		unregistered = append(unregistered, "personnel.GetPersonnelPeopleHandler")
	}
	if o.PersonnelGetPersonnelPeoplePersonIDHandler == nil {
		unregistered = append(unregistered, "personnel.GetPersonnelPeoplePersonIDHandler")
	}
	if o.PersonnelGetPersonnelSearchHandler == nil {
		unregistered = append(unregistered, "personnel.GetPersonnelSearchHandler")
	}
	if o.GetPublicCalendarIDHandler == nil {
		unregistered = append(unregistered, "GetPublicCalendarIDHandler")
	}
	if o.GetPublicHealthHandler == nil {
		unregistered = append(unregistered, "GetPublicHealthHandler")
	}
	if o.GetPublicScheduleHandler == nil {
		unregistered = append(unregistered, "GetPublicScheduleHandler")
	}
	if o.GetRolesHandler == nil {
		unregistered = append(unregistered, "GetRolesHandler")
	}
	if o.RosteringGetRosteringShowsHandler == nil {
		unregistered = append(unregistered, "rostering.GetRosteringShowsHandler")
	}
	if o.GetScheduleHandler == nil {
		unregistered = append(unregistered, "GetScheduleHandler")
	}
	if o.ShowdocsGetShowdocReportsHandler == nil {
		unregistered = append(unregistered, "showdocs.GetShowdocReportsHandler")
	}
	if o.ShowdocsGetShowdocReportsIDHandler == nil {
		unregistered = append(unregistered, "showdocs.GetShowdocReportsIDHandler")
	}
	if o.ShowdocsGetShowdocReportsIDPdfHandler == nil {
		unregistered = append(unregistered, "showdocs.GetShowdocReportsIDPdfHandler")
	}
	if o.ShowdocsGetShowdocReportsIDTexHandler == nil {
		unregistered = append(unregistered, "showdocs.GetShowdocReportsIDTexHandler")
	}
	if o.ShowdocsGetShowdocTimersHandler == nil {
		unregistered = append(unregistered, "showdocs.GetShowdocTimersHandler")
	}
	if o.ShowdocsGetShowdocTimersIDHandler == nil {
		unregistered = append(unregistered, "showdocs.GetShowdocTimersIDHandler")
	}
	if o.RosteringGetShowsShowIDInvitationsHandler == nil {
		unregistered = append(unregistered, "rostering.GetShowsShowIDInvitationsHandler")
	}
	if o.ShowsGetShowsShowIDRosterHandler == nil {
		unregistered = append(unregistered, "shows.GetShowsShowIDRosterHandler")
	}
	if o.RosteringGetShowsShowSlugSummaryHandler == nil {
		unregistered = append(unregistered, "rostering.GetShowsShowSlugSummaryHandler")
	}
	if o.PostAssignmentHandler == nil {
		unregistered = append(unregistered, "PostAssignmentHandler")
	}
	if o.PostAvailabilitiesHandler == nil {
		unregistered = append(unregistered, "PostAvailabilitiesHandler")
	}
	if o.PostEventsHandler == nil {
		unregistered = append(unregistered, "PostEventsHandler")
	}
	if o.PostEventsIDHandler == nil {
		unregistered = append(unregistered, "PostEventsIDHandler")
	}
	if o.RosteringPostInvitationsHandler == nil {
		unregistered = append(unregistered, "rostering.PostInvitationsHandler")
	}
	if o.RosteringPostInvitationsIDAcceptHandler == nil {
		unregistered = append(unregistered, "rostering.PostInvitationsIDAcceptHandler")
	}
	if o.RosteringPostInvitationsIDNotifyHandler == nil {
		unregistered = append(unregistered, "rostering.PostInvitationsIDNotifyHandler")
	}
	if o.PersonnelPostMeHandler == nil {
		unregistered = append(unregistered, "personnel.PostMeHandler")
	}
	if o.PostMediaUploadHandler == nil {
		unregistered = append(unregistered, "PostMediaUploadHandler")
	}
	if o.PersonnelPostPersonnelPeoplePersonIDImpersonateHandler == nil {
		unregistered = append(unregistered, "personnel.PostPersonnelPeoplePersonIDImpersonateHandler")
	}
	if o.PostRolesHandler == nil {
		unregistered = append(unregistered, "PostRolesHandler")
	}
	if o.RosteringPostRosteringShowsHandler == nil {
		unregistered = append(unregistered, "rostering.PostRosteringShowsHandler")
	}
	if o.PostShadowHandler == nil {
		unregistered = append(unregistered, "PostShadowHandler")
	}
	if o.ShowdocsPostShowdocReportsIDHandler == nil {
		unregistered = append(unregistered, "showdocs.PostShowdocReportsIDHandler")
	}
	if o.ShowdocsPostShowdocTimersIDHandler == nil {
		unregistered = append(unregistered, "showdocs.PostShowdocTimersIDHandler")
	}
	if o.RosteringPostShowsShowIDPeopleUnassignHandler == nil {
		unregistered = append(unregistered, "rostering.PostShowsShowIDPeopleUnassignHandler")
	}
	if o.RosteringPostShowsShowIDRolesSetorderHandler == nil {
		unregistered = append(unregistered, "rostering.PostShowsShowIDRolesSetorderHandler")
	}
	if o.RosteringPostShowsShowIDRosterReleaseHandler == nil {
		unregistered = append(unregistered, "rostering.PostShowsShowIDRosterReleaseHandler")
	}
	if o.RosteringPostShowsShowIDRosterUnreleaseHandler == nil {
		unregistered = append(unregistered, "rostering.PostShowsShowIDRosterUnreleaseHandler")
	}
	if o.PutAssignmentIDHandler == nil {
		unregistered = append(unregistered, "PutAssignmentIDHandler")
	}
	if o.PutRolesIDHandler == nil {
		unregistered = append(unregistered, "PutRolesIDHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *GoBackendAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *GoBackendAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *GoBackendAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *GoBackendAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *GoBackendAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/pdf":
			result["application/pdf"] = o.BinProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		case "text/calendar":
			result["text/calendar"] = o.TextCalendarProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *GoBackendAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the go backend API
func (o *GoBackendAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *GoBackendAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/assignment/{id}"] = NewDeleteAssignmentID(o.context, o.DeleteAssignmentIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/events/{id}"] = NewDeleteEventsID(o.context, o.DeleteEventsIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/invitations/{id}"] = rostering.NewDeleteInvitationsID(o.context, o.RosteringDeleteInvitationsIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/roles/{id}"] = NewDeleteRolesID(o.context, o.DeleteRolesIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/shadow/{id}"] = NewDeleteShadowID(o.context, o.DeleteShadowIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/availabilities"] = NewGetAvailabilities(o.context, o.GetAvailabilitiesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/events/{id}"] = NewGetEventsID(o.context, o.GetEventsIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/invitations"] = rostering.NewGetInvitations(o.context, o.RosteringGetInvitationsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/invitations/{id}"] = rostering.NewGetInvitationsID(o.context, o.RosteringGetInvitationsIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/me"] = personnel.NewGetMe(o.context, o.PersonnelGetMeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/personnel/assigned"] = NewGetPersonnelAssigned(o.context, o.GetPersonnelAssignedHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/personnel/assigned/googleContactsCSV"] = NewGetPersonnelAssignedGoogleContactsCSV(o.context, o.GetPersonnelAssignedGoogleContactsCSVHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/personnel/people"] = personnel.NewGetPersonnelPeople(o.context, o.PersonnelGetPersonnelPeopleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/personnel/people/{personId}"] = personnel.NewGetPersonnelPeoplePersonID(o.context, o.PersonnelGetPersonnelPeoplePersonIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/personnel/search"] = personnel.NewGetPersonnelSearch(o.context, o.PersonnelGetPersonnelSearchHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/public/calendar/{id}"] = NewGetPublicCalendarID(o.context, o.GetPublicCalendarIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/public/health"] = NewGetPublicHealth(o.context, o.GetPublicHealthHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/public/schedule"] = NewGetPublicSchedule(o.context, o.GetPublicScheduleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/roles"] = NewGetRoles(o.context, o.GetRolesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rostering/shows"] = rostering.NewGetRosteringShows(o.context, o.RosteringGetRosteringShowsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schedule"] = NewGetSchedule(o.context, o.GetScheduleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/showdoc/reports"] = showdocs.NewGetShowdocReports(o.context, o.ShowdocsGetShowdocReportsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/showdoc/reports/{id}"] = showdocs.NewGetShowdocReportsID(o.context, o.ShowdocsGetShowdocReportsIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/showdoc/reports/{id}/pdf"] = showdocs.NewGetShowdocReportsIDPdf(o.context, o.ShowdocsGetShowdocReportsIDPdfHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/showdoc/reports/{id}/tex"] = showdocs.NewGetShowdocReportsIDTex(o.context, o.ShowdocsGetShowdocReportsIDTexHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/showdoc/timers"] = showdocs.NewGetShowdocTimers(o.context, o.ShowdocsGetShowdocTimersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/showdoc/timers/{id}"] = showdocs.NewGetShowdocTimersID(o.context, o.ShowdocsGetShowdocTimersIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/shows/{showId}/invitations"] = rostering.NewGetShowsShowIDInvitations(o.context, o.RosteringGetShowsShowIDInvitationsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/shows/{showId}/roster"] = shows.NewGetShowsShowIDRoster(o.context, o.ShowsGetShowsShowIDRosterHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/shows/{showSlug}/summary"] = rostering.NewGetShowsShowSlugSummary(o.context, o.RosteringGetShowsShowSlugSummaryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/assignment"] = NewPostAssignment(o.context, o.PostAssignmentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/availabilities"] = NewPostAvailabilities(o.context, o.PostAvailabilitiesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/events"] = NewPostEvents(o.context, o.PostEventsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/events/{id}"] = NewPostEventsID(o.context, o.PostEventsIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/invitations"] = rostering.NewPostInvitations(o.context, o.RosteringPostInvitationsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/invitations/{id}/accept"] = rostering.NewPostInvitationsIDAccept(o.context, o.RosteringPostInvitationsIDAcceptHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/invitations/{id}/notify"] = rostering.NewPostInvitationsIDNotify(o.context, o.RosteringPostInvitationsIDNotifyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/me"] = personnel.NewPostMe(o.context, o.PersonnelPostMeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/media/upload"] = NewPostMediaUpload(o.context, o.PostMediaUploadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/personnel/people/{personId}/impersonate"] = personnel.NewPostPersonnelPeoplePersonIDImpersonate(o.context, o.PersonnelPostPersonnelPeoplePersonIDImpersonateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/roles"] = NewPostRoles(o.context, o.PostRolesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rostering/shows"] = rostering.NewPostRosteringShows(o.context, o.RosteringPostRosteringShowsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/shadow"] = NewPostShadow(o.context, o.PostShadowHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/showdoc/reports/{id}"] = showdocs.NewPostShowdocReportsID(o.context, o.ShowdocsPostShowdocReportsIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/showdoc/timers/{id}"] = showdocs.NewPostShowdocTimersID(o.context, o.ShowdocsPostShowdocTimersIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/shows/{showId}/people/unassign"] = rostering.NewPostShowsShowIDPeopleUnassign(o.context, o.RosteringPostShowsShowIDPeopleUnassignHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/shows/{showId}/roles/setorder"] = rostering.NewPostShowsShowIDRolesSetorder(o.context, o.RosteringPostShowsShowIDRolesSetorderHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/shows/{showId}/roster/release"] = rostering.NewPostShowsShowIDRosterRelease(o.context, o.RosteringPostShowsShowIDRosterReleaseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/shows/{showId}/roster/unrelease"] = rostering.NewPostShowsShowIDRosterUnrelease(o.context, o.RosteringPostShowsShowIDRosterUnreleaseHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/assignment/{id}"] = NewPutAssignmentID(o.context, o.PutAssignmentIDHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/roles/{id}"] = NewPutRolesID(o.context, o.PutRolesIDHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *GoBackendAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *GoBackendAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *GoBackendAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *GoBackendAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *GoBackendAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
