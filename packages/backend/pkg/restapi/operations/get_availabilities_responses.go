// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"showplanner.io/pkg/restapi/dtos"
)

// GetAvailabilitiesOKCode is the HTTP code returned for type GetAvailabilitiesOK
const GetAvailabilitiesOKCode int = 200

/*
GetAvailabilitiesOK OK

swagger:response getAvailabilitiesOK
*/
type GetAvailabilitiesOK struct {

	/*
	  In: Body
	*/
	Payload *dtos.AvailabilitiesDTO `json:"body,omitempty"`
}

// NewGetAvailabilitiesOK creates GetAvailabilitiesOK with default headers values
func NewGetAvailabilitiesOK() *GetAvailabilitiesOK {

	return &GetAvailabilitiesOK{}
}

// WithPayload adds the payload to the get availabilities o k response
func (o *GetAvailabilitiesOK) WithPayload(payload *dtos.AvailabilitiesDTO) *GetAvailabilitiesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get availabilities o k response
func (o *GetAvailabilitiesOK) SetPayload(payload *dtos.AvailabilitiesDTO) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAvailabilitiesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAvailabilitiesUnauthorizedCode is the HTTP code returned for type GetAvailabilitiesUnauthorized
const GetAvailabilitiesUnauthorizedCode int = 401

/*
GetAvailabilitiesUnauthorized Error

swagger:response getAvailabilitiesUnauthorized
*/
type GetAvailabilitiesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewGetAvailabilitiesUnauthorized creates GetAvailabilitiesUnauthorized with default headers values
func NewGetAvailabilitiesUnauthorized() *GetAvailabilitiesUnauthorized {

	return &GetAvailabilitiesUnauthorized{}
}

// WithPayload adds the payload to the get availabilities unauthorized response
func (o *GetAvailabilitiesUnauthorized) WithPayload(payload *dtos.Error) *GetAvailabilitiesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get availabilities unauthorized response
func (o *GetAvailabilitiesUnauthorized) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAvailabilitiesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAvailabilitiesInternalServerErrorCode is the HTTP code returned for type GetAvailabilitiesInternalServerError
const GetAvailabilitiesInternalServerErrorCode int = 500

/*
GetAvailabilitiesInternalServerError Error

swagger:response getAvailabilitiesInternalServerError
*/
type GetAvailabilitiesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewGetAvailabilitiesInternalServerError creates GetAvailabilitiesInternalServerError with default headers values
func NewGetAvailabilitiesInternalServerError() *GetAvailabilitiesInternalServerError {

	return &GetAvailabilitiesInternalServerError{}
}

// WithPayload adds the payload to the get availabilities internal server error response
func (o *GetAvailabilitiesInternalServerError) WithPayload(payload *dtos.Error) *GetAvailabilitiesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get availabilities internal server error response
func (o *GetAvailabilitiesInternalServerError) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAvailabilitiesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
