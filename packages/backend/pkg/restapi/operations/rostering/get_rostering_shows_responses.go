// Code generated by go-swagger; DO NOT EDIT.

package rostering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"showplanner.io/pkg/restapi/dtos"
)

// GetRosteringShowsOKCode is the HTTP code returned for type GetRosteringShowsOK
const GetRosteringShowsOKCode int = 200

/*
GetRosteringShowsOK OK

swagger:response getRosteringShowsOK
*/
type GetRosteringShowsOK struct {

	/*
	  In: Body
	*/
	Payload []*dtos.ShowDTO `json:"body,omitempty"`
}

// NewGetRosteringShowsOK creates GetRosteringShowsOK with default headers values
func NewGetRosteringShowsOK() *GetRosteringShowsOK {

	return &GetRosteringShowsOK{}
}

// WithPayload adds the payload to the get shows shows o k response
func (o *GetRosteringShowsOK) WithPayload(payload []*dtos.ShowDTO) *GetRosteringShowsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shows shows o k response
func (o *GetRosteringShowsOK) SetPayload(payload []*dtos.ShowDTO) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRosteringShowsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*dtos.ShowDTO, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetRosteringShowsUnauthorizedCode is the HTTP code returned for type GetRosteringShowsUnauthorized
const GetRosteringShowsUnauthorizedCode int = 401

/*
GetRosteringShowsUnauthorized Error

swagger:response getRosteringShowsUnauthorized
*/
type GetRosteringShowsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewGetRosteringShowsUnauthorized creates GetRosteringShowsUnauthorized with default headers values
func NewGetRosteringShowsUnauthorized() *GetRosteringShowsUnauthorized {

	return &GetRosteringShowsUnauthorized{}
}

// WithPayload adds the payload to the get shows shows unauthorized response
func (o *GetRosteringShowsUnauthorized) WithPayload(payload *dtos.Error) *GetRosteringShowsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shows shows unauthorized response
func (o *GetRosteringShowsUnauthorized) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRosteringShowsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRosteringShowsInternalServerErrorCode is the HTTP code returned for type GetRosteringShowsInternalServerError
const GetRosteringShowsInternalServerErrorCode int = 500

/*
GetRosteringShowsInternalServerError Error

swagger:response getRosteringShowsInternalServerError
*/
type GetRosteringShowsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewGetRosteringShowsInternalServerError creates GetRosteringShowsInternalServerError with default headers values
func NewGetRosteringShowsInternalServerError() *GetRosteringShowsInternalServerError {

	return &GetRosteringShowsInternalServerError{}
}

// WithPayload adds the payload to the get shows shows internal server error response
func (o *GetRosteringShowsInternalServerError) WithPayload(payload *dtos.Error) *GetRosteringShowsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get shows shows internal server error response
func (o *GetRosteringShowsInternalServerError) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRosteringShowsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
