// Code generated by go-swagger; DO NOT EDIT.

package rostering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"showplanner.io/pkg/restapi/dtos"
)

// PostShowsShowIDRosterUnreleaseOKCode is the HTTP code returned for type PostShowsShowIDRosterUnreleaseOK
const PostShowsShowIDRosterUnreleaseOKCode int = 200

/*
PostShowsShowIDRosterUnreleaseOK OK

swagger:response postShowsShowIdRosterUnreleaseOK
*/
type PostShowsShowIDRosterUnreleaseOK struct {
}

// NewPostShowsShowIDRosterUnreleaseOK creates PostShowsShowIDRosterUnreleaseOK with default headers values
func NewPostShowsShowIDRosterUnreleaseOK() *PostShowsShowIDRosterUnreleaseOK {

	return &PostShowsShowIDRosterUnreleaseOK{}
}

// WriteResponse to the client
func (o *PostShowsShowIDRosterUnreleaseOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PostShowsShowIDRosterUnreleaseUnauthorizedCode is the HTTP code returned for type PostShowsShowIDRosterUnreleaseUnauthorized
const PostShowsShowIDRosterUnreleaseUnauthorizedCode int = 401

/*
PostShowsShowIDRosterUnreleaseUnauthorized Error

swagger:response postShowsShowIdRosterUnreleaseUnauthorized
*/
type PostShowsShowIDRosterUnreleaseUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewPostShowsShowIDRosterUnreleaseUnauthorized creates PostShowsShowIDRosterUnreleaseUnauthorized with default headers values
func NewPostShowsShowIDRosterUnreleaseUnauthorized() *PostShowsShowIDRosterUnreleaseUnauthorized {

	return &PostShowsShowIDRosterUnreleaseUnauthorized{}
}

// WithPayload adds the payload to the post shows show Id roster unrelease unauthorized response
func (o *PostShowsShowIDRosterUnreleaseUnauthorized) WithPayload(payload *dtos.Error) *PostShowsShowIDRosterUnreleaseUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post shows show Id roster unrelease unauthorized response
func (o *PostShowsShowIDRosterUnreleaseUnauthorized) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowsShowIDRosterUnreleaseUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostShowsShowIDRosterUnreleaseInternalServerErrorCode is the HTTP code returned for type PostShowsShowIDRosterUnreleaseInternalServerError
const PostShowsShowIDRosterUnreleaseInternalServerErrorCode int = 500

/*
PostShowsShowIDRosterUnreleaseInternalServerError Error

swagger:response postShowsShowIdRosterUnreleaseInternalServerError
*/
type PostShowsShowIDRosterUnreleaseInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewPostShowsShowIDRosterUnreleaseInternalServerError creates PostShowsShowIDRosterUnreleaseInternalServerError with default headers values
func NewPostShowsShowIDRosterUnreleaseInternalServerError() *PostShowsShowIDRosterUnreleaseInternalServerError {

	return &PostShowsShowIDRosterUnreleaseInternalServerError{}
}

// WithPayload adds the payload to the post shows show Id roster unrelease internal server error response
func (o *PostShowsShowIDRosterUnreleaseInternalServerError) WithPayload(payload *dtos.Error) *PostShowsShowIDRosterUnreleaseInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post shows show Id roster unrelease internal server error response
func (o *PostShowsShowIDRosterUnreleaseInternalServerError) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowsShowIDRosterUnreleaseInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
