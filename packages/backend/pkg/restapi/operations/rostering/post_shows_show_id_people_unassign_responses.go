// Code generated by go-swagger; DO NOT EDIT.

package rostering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"showplanner.io/pkg/restapi/dtos"
)

// PostShowsShowIDPeopleUnassignOKCode is the HTTP code returned for type PostShowsShowIDPeopleUnassignOK
const PostShowsShowIDPeopleUnassignOKCode int = 200

/*
PostShowsShowIDPeopleUnassignOK OK

swagger:response postShowsShowIdPeopleUnassignOK
*/
type PostShowsShowIDPeopleUnassignOK struct {
}

// NewPostShowsShowIDPeopleUnassignOK creates PostShowsShowIDPeopleUnassignOK with default headers values
func NewPostShowsShowIDPeopleUnassignOK() *PostShowsShowIDPeopleUnassignOK {

	return &PostShowsShowIDPeopleUnassignOK{}
}

// WriteResponse to the client
func (o *PostShowsShowIDPeopleUnassignOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PostShowsShowIDPeopleUnassignUnauthorizedCode is the HTTP code returned for type PostShowsShowIDPeopleUnassignUnauthorized
const PostShowsShowIDPeopleUnassignUnauthorizedCode int = 401

/*
PostShowsShowIDPeopleUnassignUnauthorized Error

swagger:response postShowsShowIdPeopleUnassignUnauthorized
*/
type PostShowsShowIDPeopleUnassignUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewPostShowsShowIDPeopleUnassignUnauthorized creates PostShowsShowIDPeopleUnassignUnauthorized with default headers values
func NewPostShowsShowIDPeopleUnassignUnauthorized() *PostShowsShowIDPeopleUnassignUnauthorized {

	return &PostShowsShowIDPeopleUnassignUnauthorized{}
}

// WithPayload adds the payload to the post shows show Id people unassign unauthorized response
func (o *PostShowsShowIDPeopleUnassignUnauthorized) WithPayload(payload *dtos.Error) *PostShowsShowIDPeopleUnassignUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post shows show Id people unassign unauthorized response
func (o *PostShowsShowIDPeopleUnassignUnauthorized) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowsShowIDPeopleUnassignUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostShowsShowIDPeopleUnassignInternalServerErrorCode is the HTTP code returned for type PostShowsShowIDPeopleUnassignInternalServerError
const PostShowsShowIDPeopleUnassignInternalServerErrorCode int = 500

/*
PostShowsShowIDPeopleUnassignInternalServerError Error

swagger:response postShowsShowIdPeopleUnassignInternalServerError
*/
type PostShowsShowIDPeopleUnassignInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewPostShowsShowIDPeopleUnassignInternalServerError creates PostShowsShowIDPeopleUnassignInternalServerError with default headers values
func NewPostShowsShowIDPeopleUnassignInternalServerError() *PostShowsShowIDPeopleUnassignInternalServerError {

	return &PostShowsShowIDPeopleUnassignInternalServerError{}
}

// WithPayload adds the payload to the post shows show Id people unassign internal server error response
func (o *PostShowsShowIDPeopleUnassignInternalServerError) WithPayload(payload *dtos.Error) *PostShowsShowIDPeopleUnassignInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post shows show Id people unassign internal server error response
func (o *PostShowsShowIDPeopleUnassignInternalServerError) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowsShowIDPeopleUnassignInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
