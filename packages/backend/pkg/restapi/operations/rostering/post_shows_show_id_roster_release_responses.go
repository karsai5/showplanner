// Code generated by go-swagger; DO NOT EDIT.

package rostering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"showplanner.io/pkg/restapi/dtos"
)

// PostShowsShowIDRosterReleaseOKCode is the HTTP code returned for type PostShowsShowIDRosterReleaseOK
const PostShowsShowIDRosterReleaseOKCode int = 200

/*
PostShowsShowIDRosterReleaseOK OK

swagger:response postShowsShowIdRosterReleaseOK
*/
type PostShowsShowIDRosterReleaseOK struct {
}

// NewPostShowsShowIDRosterReleaseOK creates PostShowsShowIDRosterReleaseOK with default headers values
func NewPostShowsShowIDRosterReleaseOK() *PostShowsShowIDRosterReleaseOK {

	return &PostShowsShowIDRosterReleaseOK{}
}

// WriteResponse to the client
func (o *PostShowsShowIDRosterReleaseOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PostShowsShowIDRosterReleaseUnauthorizedCode is the HTTP code returned for type PostShowsShowIDRosterReleaseUnauthorized
const PostShowsShowIDRosterReleaseUnauthorizedCode int = 401

/*
PostShowsShowIDRosterReleaseUnauthorized Error

swagger:response postShowsShowIdRosterReleaseUnauthorized
*/
type PostShowsShowIDRosterReleaseUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewPostShowsShowIDRosterReleaseUnauthorized creates PostShowsShowIDRosterReleaseUnauthorized with default headers values
func NewPostShowsShowIDRosterReleaseUnauthorized() *PostShowsShowIDRosterReleaseUnauthorized {

	return &PostShowsShowIDRosterReleaseUnauthorized{}
}

// WithPayload adds the payload to the post shows show Id roster release unauthorized response
func (o *PostShowsShowIDRosterReleaseUnauthorized) WithPayload(payload *dtos.Error) *PostShowsShowIDRosterReleaseUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post shows show Id roster release unauthorized response
func (o *PostShowsShowIDRosterReleaseUnauthorized) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowsShowIDRosterReleaseUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostShowsShowIDRosterReleaseInternalServerErrorCode is the HTTP code returned for type PostShowsShowIDRosterReleaseInternalServerError
const PostShowsShowIDRosterReleaseInternalServerErrorCode int = 500

/*
PostShowsShowIDRosterReleaseInternalServerError Error

swagger:response postShowsShowIdRosterReleaseInternalServerError
*/
type PostShowsShowIDRosterReleaseInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *dtos.Error `json:"body,omitempty"`
}

// NewPostShowsShowIDRosterReleaseInternalServerError creates PostShowsShowIDRosterReleaseInternalServerError with default headers values
func NewPostShowsShowIDRosterReleaseInternalServerError() *PostShowsShowIDRosterReleaseInternalServerError {

	return &PostShowsShowIDRosterReleaseInternalServerError{}
}

// WithPayload adds the payload to the post shows show Id roster release internal server error response
func (o *PostShowsShowIDRosterReleaseInternalServerError) WithPayload(payload *dtos.Error) *PostShowsShowIDRosterReleaseInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post shows show Id roster release internal server error response
func (o *PostShowsShowIDRosterReleaseInternalServerError) SetPayload(payload *dtos.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShowsShowIDRosterReleaseInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
