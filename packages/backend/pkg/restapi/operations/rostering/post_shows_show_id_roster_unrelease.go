// Code generated by go-swagger; DO NOT EDIT.

package rostering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostShowsShowIDRosterUnreleaseHandlerFunc turns a function with the right signature into a post shows show ID roster unrelease handler
type PostShowsShowIDRosterUnreleaseHandlerFunc func(PostShowsShowIDRosterUnreleaseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostShowsShowIDRosterUnreleaseHandlerFunc) Handle(params PostShowsShowIDRosterUnreleaseParams) middleware.Responder {
	return fn(params)
}

// PostShowsShowIDRosterUnreleaseHandler interface for that can handle valid post shows show ID roster unrelease params
type PostShowsShowIDRosterUnreleaseHandler interface {
	Handle(PostShowsShowIDRosterUnreleaseParams) middleware.Responder
}

// NewPostShowsShowIDRosterUnrelease creates a new http.Handler for the post shows show ID roster unrelease operation
func NewPostShowsShowIDRosterUnrelease(ctx *middleware.Context, handler PostShowsShowIDRosterUnreleaseHandler) *PostShowsShowIDRosterUnrelease {
	return &PostShowsShowIDRosterUnrelease{Context: ctx, Handler: handler}
}

/*
	PostShowsShowIDRosterUnrelease swagger:route POST /shows/{showId}/roster/unrelease rostering postShowsShowIdRosterUnrelease

Make the roster hidden
*/
type PostShowsShowIDRosterUnrelease struct {
	Context *middleware.Context
	Handler PostShowsShowIDRosterUnreleaseHandler
}

func (o *PostShowsShowIDRosterUnrelease) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostShowsShowIDRosterUnreleaseParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
