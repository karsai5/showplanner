// Code generated by go-swagger; DO NOT EDIT.

package rostering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostRosteringShowsHandlerFunc turns a function with the right signature into a post shows shows handler
type PostRosteringShowsHandlerFunc func(PostRosteringShowsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostRosteringShowsHandlerFunc) Handle(params PostRosteringShowsParams) middleware.Responder {
	return fn(params)
}

// PostRosteringShowsHandler interface for that can handle valid post shows shows params
type PostRosteringShowsHandler interface {
	Handle(PostRosteringShowsParams) middleware.Responder
}

// NewPostRosteringShows creates a new http.Handler for the post shows shows operation
func NewPostRosteringShows(ctx *middleware.Context, handler PostRosteringShowsHandler) *PostRosteringShows {
	return &PostRosteringShows{Context: ctx, Handler: handler}
}

/*
	PostRosteringShows swagger:route POST /shows/shows shows postRosteringShows

Creates a show
*/
type PostRosteringShows struct {
	Context *middleware.Context
	Handler PostRosteringShowsHandler
}

func (o *PostRosteringShows) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostRosteringShowsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
