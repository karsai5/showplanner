// Code generated by go-swagger; DO NOT EDIT.

package rostering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostInvitationsIDAcceptHandlerFunc turns a function with the right signature into a post invitations ID accept handler
type PostInvitationsIDAcceptHandlerFunc func(PostInvitationsIDAcceptParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostInvitationsIDAcceptHandlerFunc) Handle(params PostInvitationsIDAcceptParams) middleware.Responder {
	return fn(params)
}

// PostInvitationsIDAcceptHandler interface for that can handle valid post invitations ID accept params
type PostInvitationsIDAcceptHandler interface {
	Handle(PostInvitationsIDAcceptParams) middleware.Responder
}

// NewPostInvitationsIDAccept creates a new http.Handler for the post invitations ID accept operation
func NewPostInvitationsIDAccept(ctx *middleware.Context, handler PostInvitationsIDAcceptHandler) *PostInvitationsIDAccept {
	return &PostInvitationsIDAccept{Context: ctx, Handler: handler}
}

/*
	PostInvitationsIDAccept swagger:route POST /invitations/{id}/accept rostering postInvitationsIdAccept

Accept an invitation
*/
type PostInvitationsIDAccept struct {
	Context *middleware.Context
	Handler PostInvitationsIDAcceptHandler
}

func (o *PostInvitationsIDAccept) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostInvitationsIDAcceptParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
