// Code generated by go-swagger; DO NOT EDIT.

package rostering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetRosteringShowsShowSlugSummaryHandlerFunc turns a function with the right signature into a get rostering shows show slug summary handler
type GetRosteringShowsShowSlugSummaryHandlerFunc func(GetRosteringShowsShowSlugSummaryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRosteringShowsShowSlugSummaryHandlerFunc) Handle(params GetRosteringShowsShowSlugSummaryParams) middleware.Responder {
	return fn(params)
}

// GetRosteringShowsShowSlugSummaryHandler interface for that can handle valid get rostering shows show slug summary params
type GetRosteringShowsShowSlugSummaryHandler interface {
	Handle(GetRosteringShowsShowSlugSummaryParams) middleware.Responder
}

// NewGetRosteringShowsShowSlugSummary creates a new http.Handler for the get rostering shows show slug summary operation
func NewGetRosteringShowsShowSlugSummary(ctx *middleware.Context, handler GetRosteringShowsShowSlugSummaryHandler) *GetRosteringShowsShowSlugSummary {
	return &GetRosteringShowsShowSlugSummary{Context: ctx, Handler: handler}
}

/*
	GetRosteringShowsShowSlugSummary swagger:route GET /rostering/shows/{showSlug}/summary rostering getRosteringShowsShowSlugSummary

Return details about a show from its slug
*/
type GetRosteringShowsShowSlugSummary struct {
	Context *middleware.Context
	Handler GetRosteringShowsShowSlugSummaryHandler
}

func (o *GetRosteringShowsShowSlugSummary) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetRosteringShowsShowSlugSummaryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
