// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"showplanner.io/pkg/models"
)

// PostShadowOKCode is the HTTP code returned for type PostShadowOK
const PostShadowOKCode int = 200

/*
PostShadowOK OK

swagger:response postShadowOK
*/
type PostShadowOK struct {
}

// NewPostShadowOK creates PostShadowOK with default headers values
func NewPostShadowOK() *PostShadowOK {

	return &PostShadowOK{}
}

// WriteResponse to the client
func (o *PostShadowOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PostShadowUnauthorizedCode is the HTTP code returned for type PostShadowUnauthorized
const PostShadowUnauthorizedCode int = 401

/*
PostShadowUnauthorized Error

swagger:response postShadowUnauthorized
*/
type PostShadowUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostShadowUnauthorized creates PostShadowUnauthorized with default headers values
func NewPostShadowUnauthorized() *PostShadowUnauthorized {

	return &PostShadowUnauthorized{}
}

// WithPayload adds the payload to the post shadow unauthorized response
func (o *PostShadowUnauthorized) WithPayload(payload *models.Error) *PostShadowUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post shadow unauthorized response
func (o *PostShadowUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShadowUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostShadowNotFoundCode is the HTTP code returned for type PostShadowNotFound
const PostShadowNotFoundCode int = 404

/*
PostShadowNotFound Error

swagger:response postShadowNotFound
*/
type PostShadowNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostShadowNotFound creates PostShadowNotFound with default headers values
func NewPostShadowNotFound() *PostShadowNotFound {

	return &PostShadowNotFound{}
}

// WithPayload adds the payload to the post shadow not found response
func (o *PostShadowNotFound) WithPayload(payload *models.Error) *PostShadowNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post shadow not found response
func (o *PostShadowNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShadowNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostShadowInternalServerErrorCode is the HTTP code returned for type PostShadowInternalServerError
const PostShadowInternalServerErrorCode int = 500

/*
PostShadowInternalServerError Error

swagger:response postShadowInternalServerError
*/
type PostShadowInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostShadowInternalServerError creates PostShadowInternalServerError with default headers values
func NewPostShadowInternalServerError() *PostShadowInternalServerError {

	return &PostShadowInternalServerError{}
}

// WithPayload adds the payload to the post shadow internal server error response
func (o *PostShadowInternalServerError) WithPayload(payload *models.Error) *PostShadowInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post shadow internal server error response
func (o *PostShadowInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostShadowInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
