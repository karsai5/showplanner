// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API description in Markdown.",
    "title": "Showplanner backend",
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
    "/assignment": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Assign a person to a role for an event",
        "parameters": [
          {
            "description": "The details of the assignment",
            "name": "assignment",
            "in": "body",
            "schema": {
              "$ref": "./schemas/Rostering.yaml#/CreateAssignedDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/Rostering.yaml#/AssignedDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/assignment/{id}": {
      "put": {
        "produces": [
          "application/json"
        ],
        "summary": "Assign a person to a role for an event",
        "parameters": [
          {
            "type": "number",
            "description": "Id of assignment to delete",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The details of the assignment",
            "name": "assignment",
            "in": "body",
            "schema": {
              "$ref": "./schemas/Rostering.yaml#/UpdateAssignedDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/Rostering.yaml#/AssignedDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Deletes an assignment",
        "parameters": [
          {
            "type": "number",
            "description": "Id of assignment to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/availabilities": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns availabilities for all the members of a show",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the show to get events from",
            "name": "showId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AvailabilitiesDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Create or update availability",
        "parameters": [
          {
            "description": "The availability to create or update",
            "name": "availability",
            "in": "body",
            "schema": {
              "$ref": "./schemas/Rostering.yaml#/AvailabilityDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/Rostering.yaml#/AvailabilityDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/events": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "summary": "Creates an event",
        "parameters": [
          {
            "description": "The show to create",
            "name": "event",
            "in": "body",
            "schema": {
              "$ref": "./schemas/Event.yaml#/CreateEventDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/Event.yaml#/EventDTO"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Get an event",
        "parameters": [
          {
            "type": "number",
            "description": "Id of event to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/Event.yaml#/EventDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Update event",
        "parameters": [
          {
            "type": "number",
            "description": "Id of event update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The show to create",
            "name": "event",
            "in": "body",
            "schema": {
              "$ref": "./schemas/Event.yaml#/CreateEventDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "summary": "Delete an event",
        "parameters": [
          {
            "type": "number",
            "description": "Id of event to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/invitations/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Get my invitations",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./schemas/Invitations.yaml#/InvitationDTO"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Invites a person to a show",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the show to invite a person to",
            "name": "showId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the person to invite",
            "name": "personId",
            "in": "query"
          },
          {
            "type": "string",
            "format": "email",
            "description": "Email of the person to invite",
            "name": "email",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/invitations/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "View invitation",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of invitation",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/Invitations.yaml#/InvitationDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Delete an invitation",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of invitation",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/invitations/{id}/accept": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Accept an invitation",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of invitation",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/invitations/{id}/notify": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Re send invitation email",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of invitation",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/me": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "personnel"
        ],
        "summary": "Details about logged in user",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/People.yaml#/MeDetailsDTO"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "personnel"
        ],
        "summary": "Update personal details",
        "parameters": [
          {
            "name": "personalDetails",
            "in": "body",
            "schema": {
              "$ref": "./schemas/PersonUpdateDTO.yaml"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/media/upload": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "description": "The uploaded file data",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Key of file",
            "name": "key",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Upload succesful",
            "schema": {
              "$ref": "./schemas/Media.yaml#/MediaDTO"
            }
          },
          "404": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/personnel/assigned": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns people for a show",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the show to get people for",
            "name": "showId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./schemas/People.yaml#/PersonDTOWithEmail"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/personnel/people": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "personnel"
        ],
        "summary": "Returns all people",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./schemas/People.yaml#/PersonDTOWithEmail"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/personnel/people/{personId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "personnel"
        ],
        "summary": "Get details of person",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the person",
            "name": "personId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/People.yaml#/PersonDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/personnel/people/{personId}/impersonate": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "personnel"
        ],
        "summary": "Impersonate a person, useful for testing and reproducing bugs",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the person to impersonate",
            "name": "personId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/personnel/search": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "personnel"
        ],
        "summary": "Searches for people",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search query",
            "name": "s",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./schemas/People.yaml#/PersonSearchResultDTO"
              }
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/public/calendar/{id}": {
      "get": {
        "description": "Healthcheck endpoint",
        "produces": [
          "text/calendar; charset=utf-8"
        ],
        "summary": "Healthcheck",
        "parameters": [
          {
            "type": "string",
            "description": "ID of calendar to get",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Hide events not required for",
            "name": "hideEvents",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/public/health": {
      "get": {
        "description": "Healthcheck endpoint",
        "produces": [
          "application/json"
        ],
        "summary": "Healthcheck",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheck"
            }
          }
        }
      }
    },
    "/public/schedule": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns a list of events.",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the show to get events from",
            "name": "showSlug",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "events": {
                  "type": "array",
                  "items": {
                    "$ref": "./schemas/Event.yaml#/EventPublicDTO"
                  }
                },
                "showName": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns a list of roles",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the show to get roles for",
            "name": "showId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./schemas/Role.yaml#/RoleDTO"
              }
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Creates a new role",
        "parameters": [
          {
            "description": "The availability to create or update",
            "name": "roleDetails",
            "in": "body",
            "schema": {
              "$ref": "./schemas/Role.yaml#/RoleUpdateDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/Role.yaml#/RoleDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/roles/{id}": {
      "put": {
        "produces": [
          "application/json"
        ],
        "summary": "Updates a role",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of role to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The availability to create or update",
            "name": "roleDetails",
            "in": "body",
            "schema": {
              "$ref": "./schemas/Role.yaml#/RoleUpdateDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/Role.yaml#/RoleDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "summary": "Deletes a role",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of role to update",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/rostering/shows": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Returns a list of shows",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./schemas/Show.yaml#/ShowDTO"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Creates a show",
        "parameters": [
          {
            "description": "The show to create",
            "name": "show",
            "in": "body",
            "schema": {
              "$ref": "./schemas/Show.yaml#/CreateShowDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/Show.yaml#/ShowDTO"
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/schedule": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns a list of events.",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the show to get events from",
            "name": "showId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./schemas/Rostering.yaml#/ScheduleEventDTO"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/shadow": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Assign a shadow to a role for an event",
        "parameters": [
          {
            "description": "The details of the shadow",
            "name": "shadow",
            "in": "body",
            "schema": {
              "$ref": "./schemas/Rostering.yaml#/CreateShadowDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/shadow/{id}": {
      "delete": {
        "summary": "Deletes a shadow",
        "parameters": [
          {
            "type": "number",
            "description": "Id of assignment to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/showdoc/reports": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Get users show reports",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./schemas/ShowReport.yaml#/ShowReportSummaryDTO"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/showdoc/reports/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Gets a particular show report",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/ShowReport.yaml#/ShowReportDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Updates a show report",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the show report",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Show report",
            "name": "report",
            "in": "body",
            "schema": {
              "$ref": "./schemas/ShowReport.yaml#/UpdateShowreportDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/ShowReport.yaml#/ShowReportDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/showdoc/reports/{id}/pdf": {
      "get": {
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Returns the report in the PDF format",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the show report",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A PDF file",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/showdoc/reports/{id}/tex": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Returns the report in the TEX format",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the show report",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Tex file contents",
            "schema": {
              "type": "object",
              "properties": {
                "contents": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/showdoc/timers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Get users timers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./schemas/ShowTimer.yaml#/ShowTimerSummaryDTO"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/showdoc/timers/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Gets a particular show timer",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/ShowTimer.yaml#/ShowTimerDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Updates a show timer",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "timer",
            "in": "body",
            "schema": {
              "$ref": "./schemas/ShowTimer.yaml#/UpdateShowTimerDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/ShowTimer.yaml#/ShowTimerDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/shows/{showId}/invitations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Get invitations for a show",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./schemas/Invitations.yaml#/InvitationDTO"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/shows/{showId}/people/csv-google": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "shows"
        ],
        "summary": "Returns a CSV file of people for a show compatible with google",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/shows/{showId}/people/unassign": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Unassign a person from a show",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "name": "personId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/shows/{showId}/roles/setorder": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Set the order of the roles for a show",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          },
          {
            "name": "order",
            "in": "body",
            "schema": {
              "$ref": "./schemas/Role.yaml#/RoleSetOrderDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/shows/{showId}/roster": {
      "get": {
        "description": "Get roster",
        "produces": [
          "application/json"
        ],
        "tags": [
          "shows"
        ],
        "summary": "Returns roster for a show",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "./schemas/Rostering.yaml#/RosterDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/shows/{showId}/roster/release": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Make the roster viewable by other members of the show",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "name": "sendEmail",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/shows/{showId}/roster/unrelease": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Make the roster hidden",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/shows/{showSlug}/summary": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Return details about a show from its slug",
        "parameters": [
          {
            "type": "string",
            "description": "Slug of show",
            "name": "showSlug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Show",
            "schema": {
              "$ref": "./schemas/Show.yaml#/ShowSummaryDTO"
            }
          },
          "401": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    }
  },
  "definitions": {
    "AvailabilitiesDTO": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "./schemas/Event.yaml#/EventDTO"
              },
              {
                "type": "object",
                "properties": {
                  "availabilities": {
                    "type": "array",
                    "items": {
                      "$ref": "./schemas/Rostering.yaml#/AvailabilityDTO"
                    },
                    "x-nullable": true
                  }
                }
              }
            ]
          }
        },
        "people": {
          "type": "array",
          "items": {
            "$ref": "./schemas/People.yaml#/PersonSummaryDTO"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "HealthCheck": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "Error": {
      "description": "Error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API description in Markdown.",
    "title": "Showplanner backend",
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
    "/assignment": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Assign a person to a role for an event",
        "parameters": [
          {
            "description": "The details of the assignment",
            "name": "assignment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/createAssignedDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/assignedDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/assignment/{id}": {
      "put": {
        "produces": [
          "application/json"
        ],
        "summary": "Assign a person to a role for an event",
        "parameters": [
          {
            "type": "number",
            "description": "Id of assignment to delete",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The details of the assignment",
            "name": "assignment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/updateAssignedDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/assignedDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes an assignment",
        "parameters": [
          {
            "type": "number",
            "description": "Id of assignment to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/availabilities": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns availabilities for all the members of a show",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the show to get events from",
            "name": "showId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AvailabilitiesDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Create or update availability",
        "parameters": [
          {
            "description": "The availability to create or update",
            "name": "availability",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/availabilityDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/availabilityDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/events": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "summary": "Creates an event",
        "parameters": [
          {
            "description": "The show to create",
            "name": "event",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/createEventDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/eventDTO"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Get an event",
        "parameters": [
          {
            "type": "number",
            "description": "Id of event to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/eventDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Update event",
        "parameters": [
          {
            "type": "number",
            "description": "Id of event update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The show to create",
            "name": "event",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/createEventDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "summary": "Delete an event",
        "parameters": [
          {
            "type": "number",
            "description": "Id of event to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invitations/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Get my invitations",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/invitationDTO"
              }
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Invites a person to a show",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the show to invite a person to",
            "name": "showId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Id of the person to invite",
            "name": "personId",
            "in": "query"
          },
          {
            "type": "string",
            "format": "email",
            "description": "Email of the person to invite",
            "name": "email",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invitations/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "View invitation",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of invitation",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/invitationDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Delete an invitation",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of invitation",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invitations/{id}/accept": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Accept an invitation",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of invitation",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/invitations/{id}/notify": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Re send invitation email",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of invitation",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "personnel"
        ],
        "summary": "Details about logged in user",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/meDetailsDTO"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "personnel"
        ],
        "summary": "Update personal details",
        "parameters": [
          {
            "name": "personalDetails",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/personUpdateDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/media/upload": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "description": "The uploaded file data",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Key of file",
            "name": "key",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Upload succesful",
            "schema": {
              "$ref": "#/definitions/mediaDTO"
            }
          },
          "404": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/personnel/assigned": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns people for a show",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the show to get people for",
            "name": "showId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/personDTOWithEmail"
              }
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/personnel/people": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "personnel"
        ],
        "summary": "Returns all people",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/personDTOWithEmail"
              }
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/personnel/people/{personId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "personnel"
        ],
        "summary": "Get details of person",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the person",
            "name": "personId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/personDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/personnel/people/{personId}/impersonate": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "personnel"
        ],
        "summary": "Impersonate a person, useful for testing and reproducing bugs",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the person to impersonate",
            "name": "personId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/personnel/search": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "personnel"
        ],
        "summary": "Searches for people",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search query",
            "name": "s",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/personSearchResultDTO"
              }
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/public/calendar/{id}": {
      "get": {
        "description": "Healthcheck endpoint",
        "produces": [
          "text/calendar; charset=utf-8"
        ],
        "summary": "Healthcheck",
        "parameters": [
          {
            "type": "string",
            "description": "ID of calendar to get",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Hide events not required for",
            "name": "hideEvents",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/public/health": {
      "get": {
        "description": "Healthcheck endpoint",
        "produces": [
          "application/json"
        ],
        "summary": "Healthcheck",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheck"
            }
          }
        }
      }
    },
    "/public/schedule": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns a list of events.",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the show to get events from",
            "name": "showSlug",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "events": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/eventPublicDTO"
                  }
                },
                "showName": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns a list of roles",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the show to get roles for",
            "name": "showId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleDTO"
              }
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Creates a new role",
        "parameters": [
          {
            "description": "The availability to create or update",
            "name": "roleDetails",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/roleUpdateDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/roleDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/roles/{id}": {
      "put": {
        "produces": [
          "application/json"
        ],
        "summary": "Updates a role",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of role to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "The availability to create or update",
            "name": "roleDetails",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/roleUpdateDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/roleDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "summary": "Deletes a role",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of role to update",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/rostering/shows": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Returns a list of shows",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/showDTO"
              }
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Creates a show",
        "parameters": [
          {
            "description": "The show to create",
            "name": "show",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/createShowDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/showDTO"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/schedule": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns a list of events.",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the show to get events from",
            "name": "showId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/scheduleEventDTO"
              }
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shadow": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Assign a shadow to a role for an event",
        "parameters": [
          {
            "description": "The details of the shadow",
            "name": "shadow",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/createShadowDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shadow/{id}": {
      "delete": {
        "summary": "Deletes a shadow",
        "parameters": [
          {
            "type": "number",
            "description": "Id of assignment to delete",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/showdoc/reports": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Get users show reports",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/showReportSummaryDTO"
              }
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/showdoc/reports/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Gets a particular show report",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/showReportDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Updates a show report",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the show report",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Show report",
            "name": "report",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/updateShowreportDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/showReportDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/showdoc/reports/{id}/pdf": {
      "get": {
        "produces": [
          "application/pdf"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Returns the report in the PDF format",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the show report",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A PDF file",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/showdoc/reports/{id}/tex": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Returns the report in the TEX format",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of the show report",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Tex file contents",
            "schema": {
              "type": "object",
              "properties": {
                "contents": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/showdoc/timers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Get users timers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/showTimerSummaryDTO"
              }
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/showdoc/timers/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Gets a particular show timer",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/showTimerDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "showdocs"
        ],
        "summary": "Updates a show timer",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "timer",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/updateShowTimerDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/showTimerDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shows/{showId}/invitations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Get invitations for a show",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/invitationDTO"
              }
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shows/{showId}/people/csv-google": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "shows"
        ],
        "summary": "Returns a CSV file of people for a show compatible with google",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shows/{showId}/people/unassign": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Unassign a person from a show",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "name": "personId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shows/{showId}/roles/setorder": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Set the order of the roles for a show",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          },
          {
            "name": "order",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/roleSetOrderDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shows/{showId}/roster": {
      "get": {
        "description": "Get roster",
        "produces": [
          "application/json"
        ],
        "tags": [
          "shows"
        ],
        "summary": "Returns roster for a show",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/rosterDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shows/{showId}/roster/release": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Make the roster viewable by other members of the show",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "name": "sendEmail",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shows/{showId}/roster/unrelease": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Make the roster hidden",
        "parameters": [
          {
            "type": "integer",
            "name": "showId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shows/{showSlug}/summary": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "rostering"
        ],
        "summary": "Return details about a show from its slug",
        "parameters": [
          {
            "type": "string",
            "description": "Slug of show",
            "name": "showSlug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Show",
            "schema": {
              "$ref": "#/definitions/showSummaryDTO"
            }
          },
          "401": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AvailabilitiesDTO": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailabilitiesDTOEventsItems0"
          }
        },
        "people": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/personSummaryDTO"
          }
        }
      }
    },
    "AvailabilitiesDTOEventsItems0": {
      "allOf": [
        {
          "$ref": "#/definitions/eventDTO"
        },
        {
          "type": "object",
          "properties": {
            "availabilities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/availabilityDTO"
              },
              "x-nullable": true
            }
          }
        }
      ]
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "HealthCheck": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "PersonPrivateDetailsDTOEmergencyContact": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "relationship": {
          "type": "string"
        }
      }
    },
    "RosterEventDTOAO1Assignments": {
      "description": "A map of assignments to roleId",
      "properties": {
        "default": {
          "$ref": "#/definitions/rosterAssignedDTO"
        }
      },
      "additionalProperties": {
        "$ref": "#/definitions/rosterAssignedDTO"
      }
    },
    "RosterEventDTOAO1Availabilities": {
      "description": "A map of availabilities to personId",
      "properties": {
        "default": {
          "$ref": "#/definitions/availabilityDTO"
        }
      },
      "additionalProperties": {
        "$ref": "#/definitions/availabilityDTO"
      }
    },
    "ScheduleEventDTORolesItems0": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "coveredBy": {
          "$ref": "#/definitions/personSummaryDTO"
        },
        "covering": {
          "$ref": "#/definitions/personSummaryDTO"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "shadowedBy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/personSummaryDTO"
          }
        },
        "shadowing": {
          "$ref": "#/definitions/personSummaryDTO"
        },
        "type": {
          "type": "string",
          "enum": [
            "baseRole",
            "assigned",
            "covering",
            "shadowing"
          ]
        }
      }
    },
    "assignedDTO": {
      "type": "object",
      "required": [
        "eventId",
        "person",
        "roleId"
      ],
      "properties": {
        "eventId": {
          "type": "integer"
        },
        "person": {
          "$ref": "#/definitions/personSummaryDTO"
        },
        "roleId": {
          "type": "integer"
        }
      }
    },
    "availabilityDTO": {
      "type": "object",
      "required": [
        "eventId",
        "personId",
        "available"
      ],
      "properties": {
        "available": {
          "type": "boolean"
        },
        "eventId": {
          "type": "integer"
        },
        "personId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "createAssignedDTO": {
      "type": "object",
      "required": [
        "eventId",
        "personId",
        "roleId"
      ],
      "properties": {
        "eventId": {
          "type": "integer"
        },
        "personId": {
          "type": "string",
          "format": "uuid"
        },
        "roleId": {
          "type": "integer"
        }
      }
    },
    "createEventDTO": {
      "required": [
        "showId",
        "start"
      ],
      "properties": {
        "address": {
          "type": "string",
          "x-nullable": true
        },
        "curtainsUp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "options": {
          "$ref": "#/definitions/eventOptionsDTO"
        },
        "shortnote": {
          "type": "string",
          "x-nullable": true
        },
        "showId": {
          "type": "integer"
        },
        "start": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "createShadowDTO": {
      "type": "object",
      "required": [
        "eventId",
        "personId",
        "roleId"
      ],
      "properties": {
        "eventId": {
          "type": "integer"
        },
        "personId": {
          "type": "string",
          "format": "uuid"
        },
        "roleId": {
          "type": "integer"
        }
      }
    },
    "createShowDTO": {
      "required": [
        "name",
        "company",
        "slug"
      ],
      "properties": {
        "company": {
          "type": "string"
        },
        "imageId": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        }
      }
    },
    "eventDTO": {
      "required": [
        "id",
        "start"
      ],
      "properties": {
        "address": {
          "type": "string",
          "x-nullable": true
        },
        "curtainsUp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "nameRaw": {
          "type": "string",
          "x-nullable": true
        },
        "options": {
          "$ref": "#/definitions/eventOptionsDTO"
        },
        "shortnote": {
          "type": "string",
          "x-nullable": true
        },
        "showId": {
          "type": "integer"
        },
        "showReport": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "showTimer": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "start": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "eventOptionsDTO": {
      "properties": {
        "divider": {
          "type": "boolean",
          "x-nullable": true
        },
        "userInput": {
          "$ref": "#/definitions/userInputEnum"
        }
      }
    },
    "eventPublicDTO": {
      "required": [
        "id",
        "start"
      ],
      "properties": {
        "curtainsUp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "x-nullable": true
        },
        "nameRaw": {
          "type": "string",
          "x-nullable": true
        },
        "options": {
          "$ref": "#/definitions/eventOptionsDTO"
        },
        "showId": {
          "type": "integer"
        },
        "start": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "invitationDTO": {
      "type": "object",
      "properties": {
        "dateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "email",
          "x-nullable": true
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "person": {
          "$ref": "#/definitions/personSummaryDTO"
        },
        "show": {
          "$ref": "#/definitions/showDTO"
        }
      }
    },
    "meDetailsDTO": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        }
      }
    },
    "mediaDTO": {
      "required": [
        "id",
        "key",
        "url"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "key": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "personDTO": {
      "type": "object",
      "required": [
        "id",
        "firstName",
        "lastName"
      ],
      "properties": {
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "lastName": {
          "type": "string"
        },
        "preferredName": {
          "type": "string"
        },
        "private": {
          "$ref": "#/definitions/personPrivateDetailsDTO"
        },
        "pronouns": {
          "type": "string"
        }
      }
    },
    "personDTOWithEmail": {
      "allOf": [
        {
          "$ref": "#/definitions/personDTO"
        },
        {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "x-nullable": false
            }
          }
        }
      ]
    },
    "personPrivateDetailsDTO": {
      "type": "object",
      "properties": {
        "allergies": {
          "type": "string"
        },
        "dob": {
          "type": "string",
          "format": "date"
        },
        "email": {
          "type": "string"
        },
        "emergencyContact": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "relationship": {
              "type": "string"
            }
          }
        },
        "phone": {
          "type": "string"
        },
        "wwc": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "personSearchResultDTO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "matchEmail": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "personSummaryDTO": {
      "type": "object",
      "required": [
        "id",
        "firstName",
        "lastName"
      ],
      "properties": {
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "lastName": {
          "type": "string"
        },
        "preferredName": {
          "type": "string"
        }
      }
    },
    "personUpdateDTO": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "phone",
        "dob",
        "allergies",
        "emergencyName",
        "emergencyPhone",
        "emergencyRelationship"
      ],
      "properties": {
        "allergies": {
          "type": "string"
        },
        "dob": {
          "type": "string"
        },
        "emergencyName": {
          "type": "string"
        },
        "emergencyPhone": {
          "type": "string"
        },
        "emergencyRelationship": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "hearAboutUs": {
          "type": "string",
          "x-nullable": true
        },
        "lastName": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "preferredName": {
          "type": "string",
          "x-nullable": true
        },
        "previousWork": {
          "type": "string",
          "x-nullable": true
        },
        "pronoun": {
          "type": "string",
          "x-nullable": true
        },
        "reasonForCrewing": {
          "type": "string",
          "x-nullable": true
        },
        "wwc": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "roleDTO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer"
        },
        "person": {
          "$ref": "#/definitions/personSummaryDTO"
        }
      }
    },
    "roleSetOrderDTO": {
      "description": "ID of roles in desired order",
      "type": "array",
      "items": {
        "description": "ID of role",
        "type": "integer"
      }
    },
    "roleUpdateDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "personId": {
          "type": "string",
          "format": "uuid",
          "x-nullable": true
        },
        "showId": {
          "type": "integer"
        }
      }
    },
    "rosterAssignedDTO": {
      "type": "object",
      "required": [
        "person",
        "cover",
        "available"
      ],
      "properties": {
        "assignmentId": {
          "type": "integer",
          "x-nullable": true
        },
        "available": {
          "type": "boolean"
        },
        "cover": {
          "type": "boolean"
        },
        "person": {
          "$ref": "#/definitions/personSummaryDTO"
        },
        "warnings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rosterWarningDTO"
          }
        }
      }
    },
    "rosterDTO": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rosterEventDTO"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rosterRoleDTO"
          }
        }
      }
    },
    "rosterEventDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/eventDTO"
        },
        {
          "type": "object",
          "properties": {
            "assignments": {
              "description": "A map of assignments to roleId",
              "properties": {
                "default": {
                  "$ref": "#/definitions/rosterAssignedDTO"
                }
              },
              "additionalProperties": {
                "$ref": "#/definitions/rosterAssignedDTO"
              }
            },
            "availabilities": {
              "description": "A map of availabilities to personId",
              "properties": {
                "default": {
                  "$ref": "#/definitions/availabilityDTO"
                }
              },
              "additionalProperties": {
                "$ref": "#/definitions/availabilityDTO"
              }
            },
            "shadows": {
              "description": "A map of shadows to roleId",
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/shadowDTO"
                }
              }
            },
            "warnings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rosterWarningDTO"
              }
            }
          }
        }
      ]
    },
    "rosterRoleDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/roleDTO"
        },
        {
          "type": "object",
          "properties": {
            "warnings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rosterWarningDTO"
              }
            }
          }
        }
      ]
    },
    "rosterWarningDTO": {
      "type": "object",
      "required": [
        "id",
        "message",
        "anchor"
      ],
      "properties": {
        "anchor": {
          "type": "string",
          "x-nullable": false
        },
        "id": {
          "type": "string",
          "x-nullable": false
        },
        "message": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "scheduleEventDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/eventDTO"
        },
        {
          "type": "object",
          "properties": {
            "availability": {
              "$ref": "#/definitions/availabilityDTO"
            },
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScheduleEventDTORolesItems0"
              }
            }
          }
        }
      ]
    },
    "shadowDTO": {
      "type": "object",
      "required": [
        "id",
        "person",
        "available"
      ],
      "properties": {
        "available": {
          "type": "boolean",
          "x-nullable": true
        },
        "id": {
          "type": "integer"
        },
        "person": {
          "$ref": "#/definitions/personSummaryDTO"
        }
      }
    },
    "showDTO": {
      "required": [
        "id",
        "name",
        "company",
        "slug"
      ],
      "properties": {
        "company": {
          "type": "string"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "id": {
          "type": "integer"
        },
        "image": {
          "$ref": "#/definitions/mediaDTO"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "showReportDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/updateShowreportDTO"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "showReportSummaryDTO": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "showSummaryDTO": {
      "required": [
        "id",
        "name",
        "company",
        "slug"
      ],
      "properties": {
        "company": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "isRosterReleased": {
          "type": "boolean",
          "x-nullable": true
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        }
      }
    },
    "showTimerDTO": {
      "allOf": [
        {
          "$ref": "#/definitions/updateShowTimerDTO"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      ]
    },
    "showTimerSummaryDTO": {
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "showEnd": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "showStart": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "updateAssignedDTO": {
      "type": "object",
      "required": [
        "personId"
      ],
      "properties": {
        "personId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "updateShowTimerDTO": {
      "properties": {
        "actOneFOHClearance": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "actTwoFOHClearance": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "eventId": {
          "type": "integer",
          "x-nullable": true
        },
        "expectedCurtainsUp": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "houseOpen": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "intervalEnd": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "intervalStart": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "showEnd": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "showStart": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "updateShowreportDTO": {
      "properties": {
        "actOneFOHClearance": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "actTwoFOHClearance": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "eventId": {
          "type": "integer",
          "x-nullable": true
        },
        "houseOpen": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "intervalEnd": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "intervalStart": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "notes": {
          "type": "string",
          "x-nullable": true
        },
        "showEnd": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "showStart": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "subtitle": {
          "type": "string",
          "x-nullable": true
        },
        "title": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "userInputEnum": {
      "type": "string",
      "enum": [
        "availability",
        "attendance",
        "none"
      ]
    }
  },
  "responses": {
    "Error": {
      "description": "Error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  }
}`))
}
