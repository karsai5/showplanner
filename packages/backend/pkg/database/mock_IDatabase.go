// Code generated by mockery v2.43.1. DO NOT EDIT.

package database

import (
	uuid "github.com/satori/go.uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockIDatabase is an autogenerated mock type for the IDatabase type
type MockIDatabase struct {
	mock.Mock
}

type MockIDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIDatabase) EXPECT() *MockIDatabase_Expecter {
	return &MockIDatabase_Expecter{mock: &_m.Mock}
}

// GetEventsWithAvailabilityAndAssignmentsForUser provides a mock function with given fields: showId, userId
func (_m *MockIDatabase) GetEventsWithAvailabilityAndAssignmentsForUser(showId uint, userId uuid.UUID) ([]Event, error) {
	ret := _m.Called(showId, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsWithAvailabilityAndAssignmentsForUser")
	}

	var r0 []Event
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uuid.UUID) ([]Event, error)); ok {
		return rf(showId, userId)
	}
	if rf, ok := ret.Get(0).(func(uint, uuid.UUID) []Event); ok {
		r0 = rf(showId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uuid.UUID) error); ok {
		r1 = rf(showId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsWithAvailabilityAndAssignmentsForUser'
type MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call struct {
	*mock.Call
}

// GetEventsWithAvailabilityAndAssignmentsForUser is a helper method to define mock.On call
//   - showId uint
//   - userId uuid.UUID
func (_e *MockIDatabase_Expecter) GetEventsWithAvailabilityAndAssignmentsForUser(showId interface{}, userId interface{}) *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call {
	return &MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call{Call: _e.mock.On("GetEventsWithAvailabilityAndAssignmentsForUser", showId, userId)}
}

func (_c *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call) Run(run func(showId uint, userId uuid.UUID)) *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call) Return(_a0 []Event, _a1 error) *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call) RunAndReturn(run func(uint, uuid.UUID) ([]Event, error)) *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolesForPerson provides a mock function with given fields: showId, personId
func (_m *MockIDatabase) GetRolesForPerson(showId uint, personId uuid.UUID) ([]Role, error) {
	ret := _m.Called(showId, personId)

	if len(ret) == 0 {
		panic("no return value specified for GetRolesForPerson")
	}

	var r0 []Role
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uuid.UUID) ([]Role, error)); ok {
		return rf(showId, personId)
	}
	if rf, ok := ret.Get(0).(func(uint, uuid.UUID) []Role); ok {
		r0 = rf(showId, personId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Role)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uuid.UUID) error); ok {
		r1 = rf(showId, personId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDatabase_GetRolesForPerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolesForPerson'
type MockIDatabase_GetRolesForPerson_Call struct {
	*mock.Call
}

// GetRolesForPerson is a helper method to define mock.On call
//   - showId uint
//   - personId uuid.UUID
func (_e *MockIDatabase_Expecter) GetRolesForPerson(showId interface{}, personId interface{}) *MockIDatabase_GetRolesForPerson_Call {
	return &MockIDatabase_GetRolesForPerson_Call{Call: _e.mock.On("GetRolesForPerson", showId, personId)}
}

func (_c *MockIDatabase_GetRolesForPerson_Call) Run(run func(showId uint, personId uuid.UUID)) *MockIDatabase_GetRolesForPerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIDatabase_GetRolesForPerson_Call) Return(_a0 []Role, _a1 error) *MockIDatabase_GetRolesForPerson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDatabase_GetRolesForPerson_Call) RunAndReturn(run func(uint, uuid.UUID) ([]Role, error)) *MockIDatabase_GetRolesForPerson_Call {
	_c.Call.Return(run)
	return _c
}

// GetShowsForUser provides a mock function with given fields: id
func (_m *MockIDatabase) GetShowsForUser(id uuid.UUID) ([]Show, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetShowsForUser")
	}

	var r0 []Show
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]Show, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []Show); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Show)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDatabase_GetShowsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShowsForUser'
type MockIDatabase_GetShowsForUser_Call struct {
	*mock.Call
}

// GetShowsForUser is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockIDatabase_Expecter) GetShowsForUser(id interface{}) *MockIDatabase_GetShowsForUser_Call {
	return &MockIDatabase_GetShowsForUser_Call{Call: _e.mock.On("GetShowsForUser", id)}
}

func (_c *MockIDatabase_GetShowsForUser_Call) Run(run func(id uuid.UUID)) *MockIDatabase_GetShowsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockIDatabase_GetShowsForUser_Call) Return(_a0 []Show, _a1 error) *MockIDatabase_GetShowsForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDatabase_GetShowsForUser_Call) RunAndReturn(run func(uuid.UUID) ([]Show, error)) *MockIDatabase_GetShowsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIDatabase creates a new instance of MockIDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDatabase {
	mock := &MockIDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
