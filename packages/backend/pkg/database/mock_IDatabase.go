// Code generated by mockery v2.43.2. DO NOT EDIT.

package database

import (
	uuid "github.com/satori/go.uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockIDatabase is an autogenerated mock type for the IDatabase type
type MockIDatabase struct {
	mock.Mock
}

type MockIDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIDatabase) EXPECT() *MockIDatabase_Expecter {
	return &MockIDatabase_Expecter{mock: &_m.Mock}
}

// GetEventsForRoster provides a mock function with given fields: showId
func (_m *MockIDatabase) GetEventsForRoster(showId uint) ([]Event, error) {
	ret := _m.Called(showId)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForRoster")
	}

	var r0 []Event
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]Event, error)); ok {
		return rf(showId)
	}
	if rf, ok := ret.Get(0).(func(uint) []Event); ok {
		r0 = rf(showId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(showId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDatabase_GetEventsForRoster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsForRoster'
type MockIDatabase_GetEventsForRoster_Call struct {
	*mock.Call
}

// GetEventsForRoster is a helper method to define mock.On call
//   - showId uint
func (_e *MockIDatabase_Expecter) GetEventsForRoster(showId interface{}) *MockIDatabase_GetEventsForRoster_Call {
	return &MockIDatabase_GetEventsForRoster_Call{Call: _e.mock.On("GetEventsForRoster", showId)}
}

func (_c *MockIDatabase_GetEventsForRoster_Call) Run(run func(showId uint)) *MockIDatabase_GetEventsForRoster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockIDatabase_GetEventsForRoster_Call) Return(_a0 []Event, _a1 error) *MockIDatabase_GetEventsForRoster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDatabase_GetEventsForRoster_Call) RunAndReturn(run func(uint) ([]Event, error)) *MockIDatabase_GetEventsForRoster_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsWithAvailabilityAndAssignmentsForUser provides a mock function with given fields: showId, userId
func (_m *MockIDatabase) GetEventsWithAvailabilityAndAssignmentsForUser(showId uint, userId uuid.UUID) ([]Event, error) {
	ret := _m.Called(showId, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsWithAvailabilityAndAssignmentsForUser")
	}

	var r0 []Event
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uuid.UUID) ([]Event, error)); ok {
		return rf(showId, userId)
	}
	if rf, ok := ret.Get(0).(func(uint, uuid.UUID) []Event); ok {
		r0 = rf(showId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Event)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uuid.UUID) error); ok {
		r1 = rf(showId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsWithAvailabilityAndAssignmentsForUser'
type MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call struct {
	*mock.Call
}

// GetEventsWithAvailabilityAndAssignmentsForUser is a helper method to define mock.On call
//   - showId uint
//   - userId uuid.UUID
func (_e *MockIDatabase_Expecter) GetEventsWithAvailabilityAndAssignmentsForUser(showId interface{}, userId interface{}) *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call {
	return &MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call{Call: _e.mock.On("GetEventsWithAvailabilityAndAssignmentsForUser", showId, userId)}
}

func (_c *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call) Run(run func(showId uint, userId uuid.UUID)) *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call) Return(_a0 []Event, _a1 error) *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call) RunAndReturn(run func(uint, uuid.UUID) ([]Event, error)) *MockIDatabase_GetEventsWithAvailabilityAndAssignmentsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeopleAssignedToShow provides a mock function with given fields: id
func (_m *MockIDatabase) GetPeopleAssignedToShow(id uint) ([]Person, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPeopleAssignedToShow")
	}

	var r0 []Person
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]Person, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []Person); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Person)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDatabase_GetPeopleAssignedToShow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeopleAssignedToShow'
type MockIDatabase_GetPeopleAssignedToShow_Call struct {
	*mock.Call
}

// GetPeopleAssignedToShow is a helper method to define mock.On call
//   - id uint
func (_e *MockIDatabase_Expecter) GetPeopleAssignedToShow(id interface{}) *MockIDatabase_GetPeopleAssignedToShow_Call {
	return &MockIDatabase_GetPeopleAssignedToShow_Call{Call: _e.mock.On("GetPeopleAssignedToShow", id)}
}

func (_c *MockIDatabase_GetPeopleAssignedToShow_Call) Run(run func(id uint)) *MockIDatabase_GetPeopleAssignedToShow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockIDatabase_GetPeopleAssignedToShow_Call) Return(_a0 []Person, _a1 error) *MockIDatabase_GetPeopleAssignedToShow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDatabase_GetPeopleAssignedToShow_Call) RunAndReturn(run func(uint) ([]Person, error)) *MockIDatabase_GetPeopleAssignedToShow_Call {
	_c.Call.Return(run)
	return _c
}

// GetPerson provides a mock function with given fields: id
func (_m *MockIDatabase) GetPerson(id uuid.UUID) (Person, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPerson")
	}

	var r0 Person
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (Person, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) Person); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(Person)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDatabase_GetPerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPerson'
type MockIDatabase_GetPerson_Call struct {
	*mock.Call
}

// GetPerson is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockIDatabase_Expecter) GetPerson(id interface{}) *MockIDatabase_GetPerson_Call {
	return &MockIDatabase_GetPerson_Call{Call: _e.mock.On("GetPerson", id)}
}

func (_c *MockIDatabase_GetPerson_Call) Run(run func(id uuid.UUID)) *MockIDatabase_GetPerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockIDatabase_GetPerson_Call) Return(_a0 Person, _a1 error) *MockIDatabase_GetPerson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDatabase_GetPerson_Call) RunAndReturn(run func(uuid.UUID) (Person, error)) *MockIDatabase_GetPerson_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolesForPerson provides a mock function with given fields: showId, personId
func (_m *MockIDatabase) GetRolesForPerson(showId uint, personId uuid.UUID) ([]Role, error) {
	ret := _m.Called(showId, personId)

	if len(ret) == 0 {
		panic("no return value specified for GetRolesForPerson")
	}

	var r0 []Role
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uuid.UUID) ([]Role, error)); ok {
		return rf(showId, personId)
	}
	if rf, ok := ret.Get(0).(func(uint, uuid.UUID) []Role); ok {
		r0 = rf(showId, personId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Role)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uuid.UUID) error); ok {
		r1 = rf(showId, personId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDatabase_GetRolesForPerson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolesForPerson'
type MockIDatabase_GetRolesForPerson_Call struct {
	*mock.Call
}

// GetRolesForPerson is a helper method to define mock.On call
//   - showId uint
//   - personId uuid.UUID
func (_e *MockIDatabase_Expecter) GetRolesForPerson(showId interface{}, personId interface{}) *MockIDatabase_GetRolesForPerson_Call {
	return &MockIDatabase_GetRolesForPerson_Call{Call: _e.mock.On("GetRolesForPerson", showId, personId)}
}

func (_c *MockIDatabase_GetRolesForPerson_Call) Run(run func(showId uint, personId uuid.UUID)) *MockIDatabase_GetRolesForPerson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIDatabase_GetRolesForPerson_Call) Return(_a0 []Role, _a1 error) *MockIDatabase_GetRolesForPerson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDatabase_GetRolesForPerson_Call) RunAndReturn(run func(uint, uuid.UUID) ([]Role, error)) *MockIDatabase_GetRolesForPerson_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolesForShow provides a mock function with given fields: showId
func (_m *MockIDatabase) GetRolesForShow(showId uint) ([]Role, error) {
	ret := _m.Called(showId)

	if len(ret) == 0 {
		panic("no return value specified for GetRolesForShow")
	}

	var r0 []Role
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]Role, error)); ok {
		return rf(showId)
	}
	if rf, ok := ret.Get(0).(func(uint) []Role); ok {
		r0 = rf(showId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Role)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(showId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDatabase_GetRolesForShow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolesForShow'
type MockIDatabase_GetRolesForShow_Call struct {
	*mock.Call
}

// GetRolesForShow is a helper method to define mock.On call
//   - showId uint
func (_e *MockIDatabase_Expecter) GetRolesForShow(showId interface{}) *MockIDatabase_GetRolesForShow_Call {
	return &MockIDatabase_GetRolesForShow_Call{Call: _e.mock.On("GetRolesForShow", showId)}
}

func (_c *MockIDatabase_GetRolesForShow_Call) Run(run func(showId uint)) *MockIDatabase_GetRolesForShow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockIDatabase_GetRolesForShow_Call) Return(_a0 []Role, _a1 error) *MockIDatabase_GetRolesForShow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDatabase_GetRolesForShow_Call) RunAndReturn(run func(uint) ([]Role, error)) *MockIDatabase_GetRolesForShow_Call {
	_c.Call.Return(run)
	return _c
}

// GetShowById provides a mock function with given fields: showId
func (_m *MockIDatabase) GetShowById(showId uint) (Show, error) {
	ret := _m.Called(showId)

	if len(ret) == 0 {
		panic("no return value specified for GetShowById")
	}

	var r0 Show
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (Show, error)); ok {
		return rf(showId)
	}
	if rf, ok := ret.Get(0).(func(uint) Show); ok {
		r0 = rf(showId)
	} else {
		r0 = ret.Get(0).(Show)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(showId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDatabase_GetShowById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShowById'
type MockIDatabase_GetShowById_Call struct {
	*mock.Call
}

// GetShowById is a helper method to define mock.On call
//   - showId uint
func (_e *MockIDatabase_Expecter) GetShowById(showId interface{}) *MockIDatabase_GetShowById_Call {
	return &MockIDatabase_GetShowById_Call{Call: _e.mock.On("GetShowById", showId)}
}

func (_c *MockIDatabase_GetShowById_Call) Run(run func(showId uint)) *MockIDatabase_GetShowById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockIDatabase_GetShowById_Call) Return(_a0 Show, _a1 error) *MockIDatabase_GetShowById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDatabase_GetShowById_Call) RunAndReturn(run func(uint) (Show, error)) *MockIDatabase_GetShowById_Call {
	_c.Call.Return(run)
	return _c
}

// GetShowsForUser provides a mock function with given fields: id
func (_m *MockIDatabase) GetShowsForUser(id uuid.UUID) ([]Show, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetShowsForUser")
	}

	var r0 []Show
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]Show, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []Show); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Show)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDatabase_GetShowsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShowsForUser'
type MockIDatabase_GetShowsForUser_Call struct {
	*mock.Call
}

// GetShowsForUser is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockIDatabase_Expecter) GetShowsForUser(id interface{}) *MockIDatabase_GetShowsForUser_Call {
	return &MockIDatabase_GetShowsForUser_Call{Call: _e.mock.On("GetShowsForUser", id)}
}

func (_c *MockIDatabase_GetShowsForUser_Call) Run(run func(id uuid.UUID)) *MockIDatabase_GetShowsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockIDatabase_GetShowsForUser_Call) Return(_a0 []Show, _a1 error) *MockIDatabase_GetShowsForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDatabase_GetShowsForUser_Call) RunAndReturn(run func(uuid.UUID) ([]Show, error)) *MockIDatabase_GetShowsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRosterReleaseStatus provides a mock function with given fields: showId, released
func (_m *MockIDatabase) UpdateRosterReleaseStatus(showId uint, released bool) error {
	ret := _m.Called(showId, released)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRosterReleaseStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, bool) error); ok {
		r0 = rf(showId, released)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIDatabase_UpdateRosterReleaseStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRosterReleaseStatus'
type MockIDatabase_UpdateRosterReleaseStatus_Call struct {
	*mock.Call
}

// UpdateRosterReleaseStatus is a helper method to define mock.On call
//   - showId uint
//   - released bool
func (_e *MockIDatabase_Expecter) UpdateRosterReleaseStatus(showId interface{}, released interface{}) *MockIDatabase_UpdateRosterReleaseStatus_Call {
	return &MockIDatabase_UpdateRosterReleaseStatus_Call{Call: _e.mock.On("UpdateRosterReleaseStatus", showId, released)}
}

func (_c *MockIDatabase_UpdateRosterReleaseStatus_Call) Run(run func(showId uint, released bool)) *MockIDatabase_UpdateRosterReleaseStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(bool))
	})
	return _c
}

func (_c *MockIDatabase_UpdateRosterReleaseStatus_Call) Return(_a0 error) *MockIDatabase_UpdateRosterReleaseStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDatabase_UpdateRosterReleaseStatus_Call) RunAndReturn(run func(uint, bool) error) *MockIDatabase_UpdateRosterReleaseStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateShow provides a mock function with given fields: showId, show
func (_m *MockIDatabase) UpdateShow(showId uint, show Show) (Show, error) {
	ret := _m.Called(showId, show)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShow")
	}

	var r0 Show
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, Show) (Show, error)); ok {
		return rf(showId, show)
	}
	if rf, ok := ret.Get(0).(func(uint, Show) Show); ok {
		r0 = rf(showId, show)
	} else {
		r0 = ret.Get(0).(Show)
	}

	if rf, ok := ret.Get(1).(func(uint, Show) error); ok {
		r1 = rf(showId, show)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDatabase_UpdateShow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateShow'
type MockIDatabase_UpdateShow_Call struct {
	*mock.Call
}

// UpdateShow is a helper method to define mock.On call
//   - showId uint
//   - show Show
func (_e *MockIDatabase_Expecter) UpdateShow(showId interface{}, show interface{}) *MockIDatabase_UpdateShow_Call {
	return &MockIDatabase_UpdateShow_Call{Call: _e.mock.On("UpdateShow", showId, show)}
}

func (_c *MockIDatabase_UpdateShow_Call) Run(run func(showId uint, show Show)) *MockIDatabase_UpdateShow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(Show))
	})
	return _c
}

func (_c *MockIDatabase_UpdateShow_Call) Return(_a0 Show, _a1 error) *MockIDatabase_UpdateShow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDatabase_UpdateShow_Call) RunAndReturn(run func(uint, Show) (Show, error)) *MockIDatabase_UpdateShow_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSortOrderOfRole provides a mock function with given fields: roleId, sortorder
func (_m *MockIDatabase) UpdateSortOrderOfRole(roleId uint, sortorder uint) error {
	ret := _m.Called(roleId, sortorder)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSortOrderOfRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(roleId, sortorder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIDatabase_UpdateSortOrderOfRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSortOrderOfRole'
type MockIDatabase_UpdateSortOrderOfRole_Call struct {
	*mock.Call
}

// UpdateSortOrderOfRole is a helper method to define mock.On call
//   - roleId uint
//   - sortorder uint
func (_e *MockIDatabase_Expecter) UpdateSortOrderOfRole(roleId interface{}, sortorder interface{}) *MockIDatabase_UpdateSortOrderOfRole_Call {
	return &MockIDatabase_UpdateSortOrderOfRole_Call{Call: _e.mock.On("UpdateSortOrderOfRole", roleId, sortorder)}
}

func (_c *MockIDatabase_UpdateSortOrderOfRole_Call) Run(run func(roleId uint, sortorder uint)) *MockIDatabase_UpdateSortOrderOfRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *MockIDatabase_UpdateSortOrderOfRole_Call) Return(_a0 error) *MockIDatabase_UpdateSortOrderOfRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIDatabase_UpdateSortOrderOfRole_Call) RunAndReturn(run func(uint, uint) error) *MockIDatabase_UpdateSortOrderOfRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIDatabase creates a new instance of MockIDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDatabase {
	mock := &MockIDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
