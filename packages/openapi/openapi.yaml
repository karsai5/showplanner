# yaml-language-server: $schema=https://json.schemastore.org/swagger-2.0.json
swagger: '2.0'
info:
  title: Showplanner backend
  description: API description in Markdown.
  version: 1.0.0
basePath: /v1
host: localhost:8080
schemes:
  - http
paths:
  /public/health:
    get:
      summary: Healthcheck
      description: Healthcheck endpoint
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/HealthCheck'
  /public/calendar/{id}:
    get:
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: ID of calendar to get
      summary: Healthcheck
      description: Healthcheck endpoint
      produces:
        - text/calendar; charset=utf-8
      responses:
        200:
          description: OK
          schema:
            type: string
        404:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
  /schedule:
    get:
      parameters:
        - in: query
          required: true
          name: showId
          type: integer
          description: ID of the show to get events from
      summary: Returns a list of events.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: './schemas/Rostering.yaml#/ScheduleEventDTO'
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
  /events:
    post:
      summary: Creates an event
      consumes:
        - application/json
      parameters:
        - in: body
          name: event
          description: The show to create
          schema:
            $ref: './schemas/Event.yaml#/CreateEventDTO'

      responses:
        500:
          $ref: '#/responses/Error'
        400:
          $ref: '#/responses/Error'
        200:
          description: OK
          schema:
            $ref: './schemas/Event.yaml#/EventDTO'
  /shadow:
    post:
      summary: Assign a shadow to a role for an event
      parameters:
        - in: body
          description: The details of the shadow
          name: shadow
          schema:
            $ref: './schemas/Rostering.yaml#/CreateShadowDTO'
      produces:
        - application/json
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Error'
        404:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
  /shadow/{id}:
    delete:
      summary: Deletes a shadow
      parameters:
        - in: path
          name: id
          type: number
          required: true
          description: Id of assignment to delete
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Error'
        404:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
  /assignment:
    post:
      summary: Assign a person to a role for an event
      parameters:
        - in: body
          description: The details of the assignment
          name: assignment
          schema:
            $ref: './schemas/Rostering.yaml#/CreateAssignedDTO'
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: './schemas/Rostering.yaml#/AssignedDTO'
        401:
          $ref: '#/responses/Error'
        404:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
  /assignment/{id}:
    put:
      summary: Assign a person to a role for an event
      parameters:
        - in: path
          name: id
          type: number
          required: true
          description: Id of assignment to delete
        - in: body
          description: The details of the assignment
          name: assignment
          schema:
            $ref: './schemas/Rostering.yaml#/UpdateAssignedDTO'
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: './schemas/Rostering.yaml#/AssignedDTO'
        401:
          $ref: '#/responses/Error'
        404:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
    delete:
      summary: Deletes an assignment
      parameters:
        - in: path
          name: id
          type: number
          required: true
          description: Id of assignment to delete
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Error'
        404:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
  /public/schedule:
    get:
      parameters:
        - in: query
          required: true
          name: showSlug
          type: string
          description: ID of the show to get events from
      summary: Returns a list of events.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              showName:
                type: string
              events:
                type: array
                items:
                  $ref: './schemas/Event.yaml#/EventPublicDTO'
        500:
          $ref: '#/responses/Error'
  /events/{id}:
    delete:
      summary: Delete an event
      parameters:
        - in: path
          name: id
          type: number
          required: true
          description: Id of event to delete
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/Error'
        401:
          $ref: '#/responses/Error'
        404:
          $ref: '#/responses/Error'
        200:
    post:
      summary: Update event
      parameters:
        - in: path
          name: id
          type: number
          required: true
          description: Id of event update
        - in: body
          name: event
          description: The show to create
          schema:
            $ref: './schemas/Event.yaml#/CreateEventDTO'
      produces:
        - application/json
      responses:
        401:
          $ref: '#/responses/Error'
        404:
          $ref: '#/responses/Error'
        200:
  /events/{id}/showreport:
    get:
      summary: Return show report and info about show report
      parameters:
        - in: path
          required: true
          name: id
          type: integer
          description: ID of the event
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: './schemas/ShowReport.yaml#/ShowReportForEvent'
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
        404:
          $ref: '#/responses/Error'
  /shows:
    get:
      summary: Returns a list of shows
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/Error'
        401:
          $ref: '#/responses/Error'
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: './schemas/Show.yaml#/ShowDTO'
    post:
      summary: Creates a show
      consumes:
        - application/json
      parameters:
        - in: body
          name: show
          description: The show to create
          schema:
            $ref: './schemas/Show.yaml#/CreateShowDTO'

      responses:
        500:
          description: Internal server error
        400:
          $ref: '#/responses/Error'
        401:
          $ref: '#/responses/Error'
        200:
          description: OK
          schema:
            $ref: './schemas/Show.yaml#/ShowDTO'
  /shows/{showSlug}/summary:
    get:
      summary: Return details about a show
      parameters:
        - in: path
          name: showSlug
          type: string
          required: true
          description: Slug of show
      produces:
        - application/json
      responses:
        500:
          $ref: '#/responses/Error'
        401:
          $ref: '#/responses/Error'
        404:
          $ref: '#/responses/Error'
        200:
          description: 'Show'
          schema:
            $ref: './schemas/Show.yaml#/ShowSummaryDTO'
  /personnel:
    get:
      summary: Returns all people
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: './schemas/People.yaml#/ArrayOfPersonSummaryDTO'
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
  /personnel/assignable:
    get:
      parameters:
        - in: query
          required: true
          name: showId
          type: integer
          description: ID of the show to get people for
      summary: Returns people for a show
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: './schemas/People.yaml#/ArrayOfPersonSummaryDTO'
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
  /personnel/assigned:
    get:
      parameters:
        - in: query
          required: true
          name: showId
          type: integer
          description: ID of the show to get people for
      summary: Returns people for a show
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: './schemas/People.yaml#/ArrayOfPersonSummaryDTO'
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
  /personnel/assign:
    post:
      parameters:
        - in: query
          required: true
          name: showId
          type: integer
          description: ID of the show
        - in: query
          required: true
          name: personId
          type: string
          format: uuid
          description: ID of the person
      summary: Adds a person to a show
      produces:
        - application/json
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
  /roles/{id}:
    put:
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: ID of role to update
        - in: body
          description: The availability to create or update
          name: roleDetails
          schema:
            $ref: './schemas/Role.yaml#/RoleUpdateDTO'
      summary: Updates a role
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: './schemas/Role.yaml#/RoleDTO'
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
    delete:
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: ID of role to update
      summary: Deletes a role
      produces:
        - application/json
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
  /roles:
    post:
      parameters:
        - in: body
          description: The availability to create or update
          name: roleDetails
          schema:
            $ref: './schemas/Role.yaml#/RoleUpdateDTO'
      summary: Creates a new role
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: './schemas/Role.yaml#/RoleDTO'
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
    get:
      parameters:
        - in: query
          required: true
          name: showId
          type: integer
          description: ID of the show to get roles for
      summary: Returns a list of roles
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: './schemas/Role.yaml#/RoleDTO'
        500:
          $ref: '#/responses/Error'
  /roster:
    get:
      parameters:
        - in: query
          required: true
          name: showId
          type: integer
          description: ID of the show to get events from
      summary: Returns roster for a show
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: './schemas/Rostering.yaml#/RosterDTO'
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
  /availabilities:
    get:
      parameters:
        - in: query
          required: true
          name: showId
          type: integer
          description: ID of the show to get events from
      summary: Returns availabilities for all the members of a show
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/AvailabilitiesDTO'
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
    post:
      summary: Create or update availability
      produces:
        - application/json
      parameters:
        - in: body
          name: availability
          description: The availability to create or update
          schema:
            $ref: './schemas/Rostering.yaml#/AvailabilityDTO'
      responses:
        500:
          description: Internal server error
        401:
          $ref: '#/responses/Error'
        200:
          description: OK
          schema:
            $ref: './schemas/Rostering.yaml#/AvailabilityDTO'
  /impersonate:
    post:
      produces:
        - application/json
      parameters:
        - in: query
          required: true
          name: userId
          type: string
          description: ID of the user to impersonate
      responses:
        500:
          description: Internal server error
        401:
          $ref: '#/responses/Error'
        200:
          description: OK
  /me:
    post:
      produces:
        - application/json
      parameters:
        - in: body
          description: The availability to create or update
          name: personalDetails
          schema:
            $ref: './schemas/PersonUpdateDTO.yaml'
      responses:
        500:
          description: Internal server error
        401:
          $ref: '#/responses/Error'
        200:
          description: OK
    get:
      produces:
        - application/json
      responses:
        500:
          description: Internal server error
        404:
          description: Not found
        200:
          description: Details about logged in user
          schema:
            $ref: './schemas/People.yaml#/MeDetailsDTO'
  /media/upload:
    post:
      consumes:
        - multipart/form-data
      parameters:
        - name: file
          in: formData # <-----
          description: The uploaded file data
          required: true
          type: file # <-----
        - name: key
          in: formData
          description: Key of file
          required: true
          type: string
      responses:
        500:
        404:
        200:
          description: Upload succesful
          schema:
            $ref: './schemas/Media.yaml#/MediaDTO'
  /showreports:
    get:
      summary: Get users show reports
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: './schemas/ShowReport.yaml#/ShowReportSummaryDTO'
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
        404:
          $ref: '#/responses/Error'
  /showreports/{id}:
    get:
      parameters:
        - in: path
          required: true
          name: id
          type: string
          format: uuid
          description: ID of the show report
      summary: Adds a person to a show
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: './schemas/ShowReport.yaml#/ShowReportDTO'
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
        404:
          $ref: '#/responses/Error'
    post:
      parameters:
        - in: path
          required: true
          name: id
          type: string
          format: uuid
          description: ID of the show report
        - in: body
          description: Show report
          name: report
          schema:
            $ref: './schemas/ShowReport.yaml#/UpdateShowreportDTO'
      summary: Adds a person to a show
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: './schemas/ShowReport.yaml#/ShowReportDTO'
        401:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'
  /showreports/{id}/pdf:
    get:
      parameters:
        - in: path
          required: true
          name: id
          type: string
          format: uuid
          description: ID of the show report
      summary: Returns the report in the PDF format
      produces:
        - application/pdf
      responses:
        200:
          description: A PDF file
          schema:
            type: file
        401:
          $ref: '#/responses/Error'
        404:
          $ref: '#/responses/Error'
        500:
          $ref: '#/responses/Error'

responses:
  Error:
    description: Error
    schema:
      $ref: '#/definitions/Error'
definitions:
  HealthCheck:
    type: object
    properties:
      message:
        type: string
    required:
      - message
  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
    required:
      - code
      - message
  AvailabilitiesDTO:
    type: object
    properties:
      people:
        type: array
        items:
          $ref: './schemas/People.yaml#/PersonSummaryDTO'
      events:
        type: array
        items:
          allOf:
            - $ref: './schemas/Event.yaml#/EventDTO'
            - type: object
              properties:
                availabilities:
                  x-nullable: true
                  type: array
                  items:
                    $ref: './schemas/Rostering.yaml#/AvailabilityDTO'
